import type { ExerciseCategory } from '@/types';

export const performanceOptimizationCategory: ExerciseCategory = {
  id: 'performance-optimization',
  name: 'Performance & Optimization',
  description: 'Master React performance optimization and bundle management for staff-level engineering',
  icon: 'IconGauge',
  order: 6,
  exercises: [
    {
      id: '01-react-memo-strategies',
      title: 'React.memo & Optimization Strategies',
      description: 'Master React.memo, useMemo, and useCallback for strategic render optimization',
      category: 'performance-optimization',
      difficulty: 4,
      prerequisites: ['react-hooks/01-usestate-fundamentals', 'react-hooks/02-useeffect-lifecycle'],
      learningObjectives: [
        'Understand React render behavior and re-render triggers',
        'Master React.memo and custom comparison functions',
        'Learn strategic useMemo usage for expensive computations',
        'Practice useCallback for function reference stability',
        'Implement performance measurement and monitoring',
        'Recognize and avoid common optimization pitfalls',
      ],
      hints: [
        'React.memo only prevents re-renders when props are shallowly equal',
        'useMemo should only be used for expensive computations',
        'useCallback creates stable function references to prevent child re-renders',
        'Custom memo comparison functions allow for deep equality checks',
        'Profile before optimizing - measure the actual performance impact',
        'Over-optimization can hurt performance more than help',
      ],
      estimatedTime: 60,
      filePath: './exercise-files/performance-optimization/01-react-memo-strategies/exercise.tsx',
      solutionPath: './src/exercises/performance-optimization/01-react-memo-strategies/solution.tsx',
      testsPath: './src/exercises/performance-optimization/01-react-memo-strategies/test.ts',
      instructionsPath: './src/exercises/performance-optimization/01-react-memo-strategies/instructions.md',
    },
    {
      id: '02-bundle-optimization',
      title: 'Bundle Splitting & Code Optimization',
      description: 'Master bundle splitting, lazy loading, and advanced code optimization strategies',
      category: 'performance-optimization',
      difficulty: 4,
      prerequisites: ['react-hooks/02-useeffect-lifecycle'],
      learningObjectives: [
        'Understand bundle analysis and size optimization techniques',
        'Master React.lazy and Suspense for code splitting',
        'Learn dynamic imports and chunk optimization strategies',
        'Practice route-level and component-level lazy loading',
        'Implement progressive loading and resource prioritization',
        'Monitor bundle performance and loading metrics',
      ],
      hints: [
        'React.lazy works with dynamic imports for component-level splitting',
        'Suspense boundaries handle loading states during chunk fetching',
        'Dynamic imports return promises that resolve to modules',
        'Bundle analysis tools help identify optimization opportunities',
        'Preload critical resources and lazy load non-critical ones',
        'Monitor Core Web Vitals for real-world performance impact',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/performance-optimization/02-bundle-optimization/exercise.tsx',
      solutionPath: './src/exercises/performance-optimization/02-bundle-optimization/solution.tsx',
      testsPath: './src/exercises/performance-optimization/02-bundle-optimization/test.ts',
      instructionsPath: './src/exercises/performance-optimization/02-bundle-optimization/instructions.md',
    },
  ],
};