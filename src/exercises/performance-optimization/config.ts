import type { ExerciseCategory } from '@/types';

export const performanceOptimizationCategory: ExerciseCategory = {
  id: 'performance-optimization',
  name: 'Performance & Optimization',
  description: 'Master React performance optimization and bundle management for staff-level engineering',
  icon: 'IconGauge',
  order: 6,
  exercises: [
    {
      id: '01-react-memo-strategies',
      title: 'React.memo & Optimization Strategies',
      description: 'Master React.memo, useMemo, and useCallback for strategic render optimization',
      category: 'performance-optimization',
      difficulty: 4,
      prerequisites: ['react-hooks/01-usestate-fundamentals', 'react-hooks/02-useeffect-lifecycle'],
      learningObjectives: [
        'Understand React render behavior and re-render triggers',
        'Master React.memo and custom comparison functions',
        'Learn strategic useMemo usage for expensive computations',
        'Practice useCallback for function reference stability',
        'Implement performance measurement and monitoring',
        'Recognize and avoid common optimization pitfalls',
      ],
      hints: [
        'React.memo only prevents re-renders when props are shallowly equal',
        'useMemo should only be used for expensive computations',
        'useCallback creates stable function references to prevent child re-renders',
        'Custom memo comparison functions allow for deep equality checks',
        'Profile before optimizing - measure the actual performance impact',
        'Over-optimization can hurt performance more than help',
      ],
      estimatedTime: 60,
      filePath: './exercise-files/performance-optimization/01-react-memo-strategies/exercise.tsx',
      solutionPath: './src/exercises/performance-optimization/01-react-memo-strategies/solution.tsx',
      testsPath: './src/exercises/performance-optimization/01-react-memo-strategies/test.ts',
      instructionsPath: './src/exercises/performance-optimization/01-react-memo-strategies/instructions.md',
    },
    {
      id: '02-bundle-optimization',
      title: 'Bundle Splitting & Code Optimization',
      description: 'Master bundle splitting, lazy loading, and advanced code optimization strategies',
      category: 'performance-optimization',
      difficulty: 4,
      prerequisites: ['react-hooks/02-useeffect-lifecycle'],
      learningObjectives: [
        'Understand bundle analysis and size optimization techniques',
        'Master React.lazy and Suspense for code splitting',
        'Learn dynamic imports and chunk optimization strategies',
        'Practice route-level and component-level lazy loading',
        'Implement progressive loading and resource prioritization',
        'Monitor bundle performance and loading metrics',
      ],
      hints: [
        'React.lazy works with dynamic imports for component-level splitting',
        'Suspense boundaries handle loading states during chunk fetching',
        'Dynamic imports return promises that resolve to modules',
        'Bundle analysis tools help identify optimization opportunities',
        'Preload critical resources and lazy load non-critical ones',
        'Monitor Core Web Vitals for real-world performance impact',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/performance-optimization/02-bundle-optimization/exercise.tsx',
      solutionPath: './src/exercises/performance-optimization/02-bundle-optimization/solution.tsx',
      testsPath: './src/exercises/performance-optimization/02-bundle-optimization/test.ts',
      instructionsPath: './src/exercises/performance-optimization/02-bundle-optimization/instructions.md',
    },
    {
      id: '03-memory-leak-prevention',
      title: 'Memory Leak Prevention & Detection',
      description: 'Master memory leak detection, prevention patterns, and debugging tools',
      category: 'performance-optimization',
      difficulty: 5,
      prerequisites: ['react-hooks/02-useeffect-lifecycle', 'react-hooks/04-custom-hooks'],
      learningObjectives: [
        'Understand common sources of memory leaks in React applications',
        'Learn to implement memory monitoring and leak detection utilities',
        'Master proper cleanup patterns for event listeners and subscriptions',
        'Practice using WeakMap and WeakSet for automatic garbage collection',
        'Implement AbortController for canceling async operations',
        'Build debugging tools for identifying and preventing memory leaks',
      ],
      hints: [
        'Use performance.memory API to monitor heap usage in supported browsers',
        'WeakMap entries are automatically garbage collected when keys are no longer referenced',
        'AbortController can cancel fetch requests and prevent memory leaks from completed requests',
        'Event listeners must be removed with the exact same function reference used to add them',
        'Use useEffect cleanup functions to prevent memory leaks in React components',
        'Monitor memory usage patterns to detect leaks before they become critical',
      ],
      estimatedTime: 90,
      filePath: './exercise-files/performance-optimization/03-memory-leak-prevention/exercise.tsx',
      solutionPath: './src/exercises/performance-optimization/03-memory-leak-prevention/solution.tsx',
      testsPath: './src/exercises/performance-optimization/03-memory-leak-prevention/test.ts',
      instructionsPath: './src/exercises/performance-optimization/03-memory-leak-prevention/instructions.md',
    },
    {
      id: '04-virtual-scrolling',
      title: 'Virtual Scrolling & Large Dataset Performance',
      description: 'Implement virtual scrolling for handling massive datasets with smooth performance',
      category: 'performance-optimization',
      difficulty: 5,
      prerequisites: ['react-hooks/01-usestate-fundamentals', 'react-hooks/02-useeffect-lifecycle'],
      learningObjectives: [
        'Understand virtual scrolling concepts and implementation strategies',
        'Learn to calculate viewport ranges and item positioning for large datasets',
        'Master 2D virtualization for grid layouts with millions of items',
        'Implement infinite scrolling with virtual rendering',
        'Practice performance optimization for smooth 60fps scrolling',
        'Build reusable virtual scrolling components and hooks',
      ],
      hints: [
        'Virtual scrolling only renders items visible in the viewport plus a small overscan',
        'Calculate visible range based on scroll position and item height: startIndex = Math.floor(scrollTop / itemHeight)',
        'Use absolute positioning to place items at their correct virtual positions',
        'Implement overscan (extra items beyond viewport) for smoother scrolling experience',
        'For 2D grids, calculate both row and column ranges based on scroll position',
        'Use passive event listeners for scroll events to improve performance',
      ],
      estimatedTime: 90,
      filePath: './exercise-files/performance-optimization/04-virtual-scrolling/exercise.tsx',
      solutionPath: './src/exercises/performance-optimization/04-virtual-scrolling/solution.tsx',
      testsPath: './src/exercises/performance-optimization/04-virtual-scrolling/test.ts',
      instructionsPath: './src/exercises/performance-optimization/04-virtual-scrolling/instructions.md',
    },
    {
      id: '05-web-vitals-optimization',
      title: 'Web Vitals Optimization',
      description: 'Master Core Web Vitals (LCP, FID, CLS) measurement and optimization',
      category: 'performance-optimization',
      difficulty: 4,
      prerequisites: ['react-hooks/02-useeffect-lifecycle'],
      learningObjectives: [
        'Master Core Web Vitals (LCP, FID, CLS) measurement and optimization',
        'Learn to implement real-time performance monitoring with Performance Observer API',
        'Practice image optimization techniques for LCP improvement',
        'Build layout stability solutions to prevent CLS issues',
        'Understand performance budgets and continuous monitoring',
        'Create production-ready Web Vitals reporting systems',
      ],
      hints: [
        'Use PerformanceObserver API to monitor largest-contentful-paint, first-input, and layout-shift',
        'LCP threshold: good ≤2.5s, needs improvement ≤4s, poor >4s',
        'FID threshold: good ≤100ms, needs improvement ≤300ms, poor >300ms',
        'CLS threshold: good ≤0.1, needs improvement ≤0.25, poor >0.25',
        'Preload critical images and use lazy loading for non-critical ones',
        'Reserve space for dynamic content to prevent layout shifts',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/performance-optimization/05-web-vitals-optimization/exercise.tsx',
      solutionPath: './src/exercises/performance-optimization/05-web-vitals-optimization/solution.tsx',
      testsPath: './src/exercises/performance-optimization/05-web-vitals-optimization/test.ts',
      instructionsPath: './src/exercises/performance-optimization/05-web-vitals-optimization/instructions.md',
    },
    {
      id: '06-render-optimization',
      title: 'Render Optimization & Concurrent Features',
      description: 'Master advanced rendering patterns and React concurrent features for optimal performance',
      category: 'performance-optimization',
      difficulty: 5,
      prerequisites: ['react-hooks/01-usestate-fundamentals', 'react-hooks/02-useeffect-lifecycle'],
      learningObjectives: [
        'Master advanced rendering patterns and optimization techniques',
        'Learn to implement render tracking and performance monitoring',
        'Practice React concurrent features (useTransition, useDeferredValue)',
        'Build batched update systems for improved performance',
        'Understand time slicing and priority-based scheduling',
        'Create production-ready render optimization tools',
      ],
      hints: [
        'Use performance.now() for accurate render time measurement',
        'Implement React.memo, useMemo, and useCallback for optimization',
        'Use useTransition for non-urgent updates to maintain responsiveness',
        'Break heavy rendering into time slices with setTimeout',
        'Batch updates by priority: urgent (immediate), normal (16ms), low (32ms)',
        'Monitor render performance and warn about expensive renders (>16ms)',
      ],
      estimatedTime: 90,
      filePath: './exercise-files/performance-optimization/06-render-optimization/exercise.tsx',
      solutionPath: './src/exercises/performance-optimization/06-render-optimization/solution.tsx',
      testsPath: './src/exercises/performance-optimization/06-render-optimization/test.ts',
      instructionsPath: './src/exercises/performance-optimization/06-render-optimization/instructions.md',
    },
    {
      id: '07-network-optimization',
      title: 'Network Optimization & Caching Strategies',
      description: 'Master network request optimization, intelligent caching, and offline handling',
      category: 'performance-optimization',
      difficulty: 4,
      prerequisites: ['react-hooks/02-useeffect-lifecycle'],
      learningObjectives: [
        'Master network request optimization and intelligent caching strategies',
        'Learn to implement request batching and deduplication techniques',
        'Practice offline handling with request queuing and sync',
        'Build production-ready HTTP caching with ETags and TTL',
        'Understand request prioritization and retry mechanisms',
        'Create comprehensive network performance monitoring tools',
      ],
      hints: [
        'Batch similar requests to reduce HTTP overhead and improve performance',
        'Implement intelligent caching with TTL, ETags, and conditional requests',
        'Use request deduplication to prevent unnecessary duplicate network calls',
        'Handle offline scenarios with persistent request queuing and background sync',
        'Implement retry logic with exponential backoff for robust error handling',
        'Monitor cache hit rates and request timing for optimization insights',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/performance-optimization/07-network-optimization/exercise.tsx',
      solutionPath: './src/exercises/performance-optimization/07-network-optimization/solution.tsx',
      testsPath: './src/exercises/performance-optimization/07-network-optimization/test.ts',
      instructionsPath: './src/exercises/performance-optimization/07-network-optimization/instructions.md',
    },
  ],
};