import type { ExerciseCategory } from '@/types';

export const testingStrategiesCategory: ExerciseCategory = {
  id: 'testing-strategies',
  name: 'Testing Strategies',
  description: 'Master comprehensive testing patterns and strategies used by Staff Frontend Engineers, from React Testing Library mastery to advanced mocking and visual regression testing',
  icon: 'IconTestPipe',
  order: 9,
  exercises: [
    {
      id: '01-testing-library-mastery',
      title: 'Testing Library Mastery',
      description: 'Master advanced React Testing Library patterns for user-centric testing with complex forms, data tables, interactive charts, and async components',
      category: 'testing-strategies',
      difficulty: 4,
      prerequisites: [],
      learningObjectives: [
        'Master advanced React Testing Library patterns for complex components',
        'Implement user-centric testing approaches focusing on behavior over implementation',
        'Integrate accessibility testing with proper ARIA attributes and screen reader support',
        'Build async testing patterns for loading states, error handling, and user interactions',
        'Create custom queries and utilities for domain-specific testing scenarios',
        'Test complex user interactions with forms, tables, charts, and dynamic components',
      ],
      hints: [
        'Use proper query hierarchy: getByRole > getByLabelText > getByText > getByTestId',
        'Test user behavior and observable outcomes, not internal implementation details',
        'Include comprehensive accessibility testing with ARIA attributes and roles',
        'Handle async operations with waitFor and proper cleanup',
        'Create custom render functions with necessary providers for consistent testing',
        'Build reusable test helpers for common interaction patterns',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/testing-strategies/01-testing-library-mastery/exercise.tsx',
      solutionPath: './src/exercises/testing-strategies/01-testing-library-mastery/solution.tsx',
      testsPath: './src/exercises/testing-strategies/01-testing-library-mastery/test.ts',
      instructionsPath: './src/exercises/testing-strategies/01-testing-library-mastery/instructions.md',
    },
    {
      id: '02-mock-strategies-advanced',
      title: 'Advanced Mock Strategies',
      description: 'Master sophisticated mocking patterns for external dependencies including API clients, WebSockets, file uploads, and payment services',
      category: 'testing-strategies',
      difficulty: 4,
      prerequisites: ['01-testing-library-mastery'],
      learningObjectives: [
        'Implement module mocking strategies for external dependencies and third-party libraries',
        'Master API mocking with MSW (Mock Service Worker) for realistic network simulation',
        'Handle timer and async mocking for time-dependent and asynchronous operations',
        'Apply partial mocking techniques for selective dependency replacement',
        'Create dynamic mock configuration for different test scenarios',
        'Manage mock state and cleanup between test runs for reliable testing',
      ],
      hints: [
        'Use MSW for realistic API mocking instead of Jest fetch mocks when possible',
        'Mock at the boundary - mock external dependencies, not internal modules',
        'Use jest.useFakeTimers() for testing time-dependent logic like retries and timeouts',
        'Create mock factories for reusable mock configurations across tests',
        'Test error scenarios and edge cases with controlled mock failures',
        'Clean up mocks and timers in afterEach to prevent test interference',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/testing-strategies/02-mock-strategies-advanced/exercise.tsx',
      solutionPath: './src/exercises/testing-strategies/02-mock-strategies-advanced/solution.tsx',
      testsPath: './src/exercises/testing-strategies/02-mock-strategies-advanced/test.ts',
      instructionsPath: './src/exercises/testing-strategies/02-mock-strategies-advanced/instructions.md',
    },
    {
      id: '03-snapshot-visual-testing',
      title: 'Snapshot & Visual Testing',
      description: 'Implement comprehensive snapshot testing and visual regression strategies for UI components, layout systems, and responsive design patterns',
      category: 'testing-strategies',
      difficulty: 4,
      prerequisites: ['01-testing-library-mastery'],
      learningObjectives: [
        'Master component snapshot testing for structural consistency verification',
        'Implement visual regression testing workflows with automated screenshot comparison',
        'Build cross-browser testing strategies for consistent visual appearance',
        'Create responsive design testing patterns for multiple viewport sizes',
        'Design theme-aware testing for dark/light mode and design system consistency',
        'Establish visual testing CI/CD integration for automated regression detection',
      ],
      hints: [
        'Use Jest snapshots for component structure, not just for visual appearance',
        'Create multiple snapshots for different component states and variants',
        'Test responsive breakpoints by mocking window.innerWidth in tests',
        'Include theme variations in snapshot testing for design system consistency',
        'Use data attributes consistently for reliable visual testing selectors',
        'Test component accessibility alongside visual appearance',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/testing-strategies/03-snapshot-visual-testing/exercise.tsx',
      solutionPath: './src/exercises/testing-strategies/03-snapshot-visual-testing/solution.tsx',
      testsPath: './src/exercises/testing-strategies/03-snapshot-visual-testing/test.ts',
      instructionsPath: './src/exercises/testing-strategies/03-snapshot-visual-testing/instructions.md',
    },
  ],
};