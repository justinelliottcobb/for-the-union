import type { ExerciseCategory } from '@/types';

export const testingStrategiesCategory: ExerciseCategory = {
  id: 'testing-strategies',
  name: 'Testing Strategies',
  description: 'Master comprehensive testing patterns and strategies used by Staff Frontend Engineers, from React Testing Library mastery to advanced mocking and visual regression testing',
  icon: 'IconTestPipe',
  order: 9,
  exercises: [
    {
      id: '01-testing-library-mastery',
      title: 'Testing Library Mastery',
      description: 'Master advanced React Testing Library patterns for user-centric testing with complex forms, data tables, interactive charts, and async components',
      category: 'testing-strategies',
      difficulty: 4,
      prerequisites: [],
      learningObjectives: [
        'Master advanced React Testing Library patterns for complex components',
        'Implement user-centric testing approaches focusing on behavior over implementation',
        'Integrate accessibility testing with proper ARIA attributes and screen reader support',
        'Build async testing patterns for loading states, error handling, and user interactions',
        'Create custom queries and utilities for domain-specific testing scenarios',
        'Test complex user interactions with forms, tables, charts, and dynamic components',
      ],
      hints: [
        'Use proper query hierarchy: getByRole > getByLabelText > getByText > getByTestId',
        'Test user behavior and observable outcomes, not internal implementation details',
        'Include comprehensive accessibility testing with ARIA attributes and roles',
        'Handle async operations with waitFor and proper cleanup',
        'Create custom render functions with necessary providers for consistent testing',
        'Build reusable test helpers for common interaction patterns',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/testing-strategies/01-testing-library-mastery/exercise.tsx',
      solutionPath: './src/exercises/testing-strategies/01-testing-library-mastery/solution.tsx',
      testsPath: './src/exercises/testing-strategies/01-testing-library-mastery/test.ts',
      instructionsPath: './src/exercises/testing-strategies/01-testing-library-mastery/instructions.md',
    },
    {
      id: '02-mock-strategies-advanced',
      title: 'Advanced Mock Strategies',
      description: 'Master sophisticated mocking patterns for external dependencies including API clients, WebSockets, file uploads, and payment services',
      category: 'testing-strategies',
      difficulty: 4,
      prerequisites: ['01-testing-library-mastery'],
      learningObjectives: [
        'Implement module mocking strategies for external dependencies and third-party libraries',
        'Master API mocking with MSW (Mock Service Worker) for realistic network simulation',
        'Handle timer and async mocking for time-dependent and asynchronous operations',
        'Apply partial mocking techniques for selective dependency replacement',
        'Create dynamic mock configuration for different test scenarios',
        'Manage mock state and cleanup between test runs for reliable testing',
      ],
      hints: [
        'Use MSW for realistic API mocking instead of Jest fetch mocks when possible',
        'Mock at the boundary - mock external dependencies, not internal modules',
        'Use jest.useFakeTimers() for testing time-dependent logic like retries and timeouts',
        'Create mock factories for reusable mock configurations across tests',
        'Test error scenarios and edge cases with controlled mock failures',
        'Clean up mocks and timers in afterEach to prevent test interference',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/testing-strategies/02-mock-strategies-advanced/exercise.tsx',
      solutionPath: './src/exercises/testing-strategies/02-mock-strategies-advanced/solution.tsx',
      testsPath: './src/exercises/testing-strategies/02-mock-strategies-advanced/test.ts',
      instructionsPath: './src/exercises/testing-strategies/02-mock-strategies-advanced/instructions.md',
    },
    {
      id: '03-snapshot-visual-testing',
      title: 'Snapshot & Visual Testing',
      description: 'Implement comprehensive snapshot testing and visual regression strategies for UI components, layout systems, and responsive design patterns',
      category: 'testing-strategies',
      difficulty: 4,
      prerequisites: ['01-testing-library-mastery'],
      learningObjectives: [
        'Master component snapshot testing for structural consistency verification',
        'Implement visual regression testing workflows with automated screenshot comparison',
        'Build cross-browser testing strategies for consistent visual appearance',
        'Create responsive design testing patterns for multiple viewport sizes',
        'Design theme-aware testing for dark/light mode and design system consistency',
        'Establish visual testing CI/CD integration for automated regression detection',
      ],
      hints: [
        'Use Jest snapshots for component structure, not just for visual appearance',
        'Create multiple snapshots for different component states and variants',
        'Test responsive breakpoints by mocking window.innerWidth in tests',
        'Include theme variations in snapshot testing for design system consistency',
        'Use data attributes consistently for reliable visual testing selectors',
        'Test component accessibility alongside visual appearance',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/testing-strategies/03-snapshot-visual-testing/exercise.tsx',
      solutionPath: './src/exercises/testing-strategies/03-snapshot-visual-testing/solution.tsx',
      testsPath: './src/exercises/testing-strategies/03-snapshot-visual-testing/test.ts',
      instructionsPath: './src/exercises/testing-strategies/03-snapshot-visual-testing/instructions.md',
    },
    {
      id: '04-integration-testing-patterns',
      title: 'Integration Testing Patterns',
      description: 'Master integration testing approaches for React applications with component integration, state management testing, and routing tests',
      category: 'testing-strategies',
      difficulty: 5,
      prerequisites: ['01-testing-library-mastery', '02-mock-strategies-advanced'],
      learningObjectives: [
        'Master component integration testing for components that work together through shared contexts and state',
        'Implement provider testing strategies for React context providers and their integration with components',
        'Build routing integration tests for components that depend on React Router and navigation state',
        'Create hook composition testing patterns for custom hooks that integrate multiple React features',
        'Test multi-component workflows and complex user flows that span multiple components and state changes',
        'Design state management integration testing for global state through context providers',
      ],
      hints: [
        'Test component integration through shared contexts rather than isolation',
        'Use MemoryRouter for testing routing-dependent components',
        'Create provider wrapper functions for consistent test setup',
        'Focus on testing interactions between components, not individual component behavior',
        'Test complete user workflows from start to finish',
        'Use custom render functions with pre-configured providers',
      ],
      estimatedTime: 90,
      filePath: './exercise-files/testing-strategies/04-integration-testing-patterns/exercise.tsx',
      solutionPath: './src/exercises/testing-strategies/04-integration-testing-patterns/solution.tsx',
      testsPath: './src/exercises/testing-strategies/04-integration-testing-patterns/test.ts',
      instructionsPath: './src/exercises/testing-strategies/04-integration-testing-patterns/instructions.md',
    },
    {
      id: '05-e2e-testing-playwright',
      title: 'End-to-End Testing with Playwright',
      description: 'Master end-to-end testing with Playwright and modern tools including Page Object Model, test isolation, and parallel execution',
      category: 'testing-strategies',
      difficulty: 5,
      prerequisites: ['04-integration-testing-patterns'],
      learningObjectives: [
        'Master Playwright test framework for comprehensive E2E testing with modern automation capabilities',
        'Implement Page Object Model patterns for organizing test code with maintainable page object structures',
        'Design test isolation strategies ensuring tests run independently without interference',
        'Build cross-browser testing workflows for testing applications across different browsers and devices',
        'Create parallel execution strategies for running tests efficiently with optimal performance',
        'Integrate API testing with UI testing for complete coverage of user workflows',
      ],
      hints: [
        'Use Page Object Model to encapsulate page-specific logic and selectors',
        'Implement proper test isolation with setup and teardown procedures',
        'Use data-testid attributes for reliable element selection in E2E tests',
        'Test critical user paths rather than every possible interaction',
        'Combine API testing with UI testing for comprehensive coverage',
        'Use Playwright trace recording for debugging failed tests',
      ],
      estimatedTime: 90,
      filePath: './exercise-files/testing-strategies/05-e2e-testing-playwright/exercise.tsx',
      solutionPath: './src/exercises/testing-strategies/05-e2e-testing-playwright/solution.tsx',
      testsPath: './src/exercises/testing-strategies/05-e2e-testing-playwright/test.ts',
      instructionsPath: './src/exercises/testing-strategies/05-e2e-testing-playwright/instructions.md',
    },
    {
      id: '06-accessibility-testing',
      title: 'Accessibility Testing & WCAG Compliance',
      description: 'Implement automated accessibility testing and WCAG compliance with axe-core, jest-axe, screen reader testing, and manual testing strategies',
      category: 'testing-strategies',
      difficulty: 4,
      prerequisites: ['01-testing-library-mastery'],
      learningObjectives: [
        'Master WCAG 2.1 compliance through understanding and implementing Web Content Accessibility Guidelines',
        'Implement automated accessibility testing using tools like axe-core, jest-axe, and pa11y',
        'Build screen reader testing strategies ensuring applications work correctly with assistive technologies',
        'Design keyboard navigation testing for comprehensive keyboard accessibility verification',
        'Create focus management testing patterns for proper focus handling in dynamic interfaces',
        'Test color and contrast accessibility for users with visual impairments and color blindness',
      ],
      hints: [
        'Use axe-core and jest-axe for automated accessibility violation detection',
        'Test keyboard navigation paths and focus management manually',
        'Include ARIA attributes testing alongside automated accessibility tools',
        'Test with actual screen readers when possible, not just automated tools',
        'Verify color contrast ratios meet WCAG AA standards (4.5:1 for normal text)',
        'Test form accessibility with proper labels and error announcements',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/testing-strategies/06-accessibility-testing/exercise.tsx',
      solutionPath: './src/exercises/testing-strategies/06-accessibility-testing/solution.tsx',
      testsPath: './src/exercises/testing-strategies/06-accessibility-testing/test.ts',
      instructionsPath: './src/exercises/testing-strategies/06-accessibility-testing/instructions.md',
    },
  ],
};