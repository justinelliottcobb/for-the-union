import type { ExerciseCategory } from '@/types';

export const aiIntegrationCategory: ExerciseCategory = {
  id: 'ai-integration',
  name: 'AI Integration',
  description: 'Master modern AI integration patterns for React applications using cutting-edge tools like Vercel AI SDK and Model Context Protocol (MCP)',
  icon: 'IconBrain',
  order: 10,
  exercises: [
    {
      id: '01-vercel-ai-sdk-fundamentals',
      title: 'Vercel AI SDK Fundamentals',
      description: 'Master Vercel AI SDK setup and basic streaming patterns with provider abstraction, token management, and error handling',
      category: 'ai-integration',
      difficulty: 3,
      prerequisites: [],
      learningObjectives: [
        'Implement Vercel AI SDK with streaming response patterns for real-time AI interactions',
        'Build AI provider abstraction layer supporting OpenAI, Anthropic, and other providers',
        'Create comprehensive token management and estimation systems for cost control',
        'Design rate limiting and error handling patterns for production AI applications',
        'Implement streaming text components with real-time response rendering',
        'Build provider switching mechanisms with fallback strategies and load balancing',
      ],
      hints: [
        'Use Vercel AI SDK streaming utilities for real-time response rendering',
        'Implement provider abstraction to easily switch between OpenAI, Anthropic, etc.',
        'Add token estimation before requests to manage costs and prevent overruns',
        'Include rate limiting to handle API quotas and prevent abuse',
        'Design error handling for network issues, API errors, and quota limits',
        'Create reusable chat interface components with streaming support',
      ],
      estimatedTime: 60,
      filePath: './exercise-files/ai-integration/01-vercel-ai-sdk-fundamentals/exercise.tsx',
      solutionPath: './src/exercises/ai-integration/01-vercel-ai-sdk-fundamentals/solution.tsx',
      testsPath: './src/exercises/ai-integration/01-vercel-ai-sdk-fundamentals/test.ts',
      instructionsPath: './src/exercises/ai-integration/01-vercel-ai-sdk-fundamentals/instructions.md',
    },
    {
      id: '02-mcp-protocol-integration',
      title: 'MCP Protocol Integration',
      description: 'Implement Model Context Protocol (MCP) for advanced tool calling and bidirectional AI communication',
      category: 'ai-integration',
      difficulty: 4,
      prerequisites: ['01-vercel-ai-sdk-fundamentals'],
      learningObjectives: [
        'Master Model Context Protocol (MCP) implementation for advanced AI tool integration',
        'Build comprehensive tool registry systems with schema validation and type safety',
        'Create bidirectional communication patterns between AI models and application tools',
        'Design context management systems for persistent tool state and conversation context',
        'Implement protocol validation and error handling for reliable MCP communication',
        'Build tool definition systems with automatic schema generation and documentation',
      ],
      hints: [
        'Use MCP TypeScript SDK for type-safe protocol implementation',
        'Create tool registry with schema validation for reliable tool calling',
        'Implement bidirectional communication for tool results and context updates',
        'Design context persistence for maintaining state across tool interactions',
        'Add protocol validation to ensure MCP compliance and error detection',
        'Build tool documentation generation for developer experience',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/ai-integration/02-mcp-protocol-integration/exercise.tsx',
      solutionPath: './src/exercises/ai-integration/02-mcp-protocol-integration/solution.tsx',
      testsPath: './src/exercises/ai-integration/02-mcp-protocol-integration/test.ts',
      instructionsPath: './src/exercises/ai-integration/02-mcp-protocol-integration/instructions.md',
    },
    {
      id: '03-ai-state-management',
      title: 'AI State Management',
      description: 'Build sophisticated AI conversation state management with context persistence, windowing, and state synchronization',
      category: 'ai-integration',
      difficulty: 4,
      prerequisites: ['01-vercel-ai-sdk-fundamentals', '02-mcp-protocol-integration'],
      learningObjectives: [
        'Design comprehensive conversation state management with persistent storage and recovery',
        'Implement context windowing strategies for managing long conversations within token limits',
        'Build state synchronization systems for real-time conversation updates across multiple clients',
        'Create conversation branching and versioning for exploring multiple AI interaction paths',
        'Develop state hydration and serialization patterns for reliable conversation persistence',
        'Master conversation history management with search, filtering, and organization capabilities',
      ],
      hints: [
        'Use Zustand or Redux for centralized conversation state management',
        'Implement context windowing to manage token limits in long conversations',
        'Create state persistence with localStorage and database synchronization',
        'Design conversation branching for exploring alternative conversation paths',
        'Add state recovery mechanisms for handling interruptions and errors',
        'Build conversation search and filtering for managing conversation history',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/ai-integration/03-ai-state-management/exercise.tsx',
      solutionPath: './src/exercises/ai-integration/03-ai-state-management/solution.tsx',
      testsPath: './src/exercises/ai-integration/03-ai-state-management/test.ts',
      instructionsPath: './src/exercises/ai-integration/03-ai-state-management/instructions.md',
    },
  ],
};