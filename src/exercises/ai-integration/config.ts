import type { ExerciseCategory } from '@/types';

export const aiIntegrationCategory: ExerciseCategory = {
  id: 'ai-integration',
  name: 'AI Integration',
  description: 'Master modern AI integration patterns for React applications using cutting-edge tools like Vercel AI SDK and Model Context Protocol (MCP)',
  icon: 'IconBrain',
  order: 10,
  exercises: [
    {
      id: '01-vercel-ai-sdk-fundamentals',
      title: 'Vercel AI SDK Fundamentals',
      description: 'Master Vercel AI SDK setup and basic streaming patterns with provider abstraction, token management, and error handling',
      category: 'ai-integration',
      difficulty: 3,
      prerequisites: [],
      learningObjectives: [
        'Implement Vercel AI SDK with streaming response patterns for real-time AI interactions',
        'Build AI provider abstraction layer supporting OpenAI, Anthropic, and other providers',
        'Create comprehensive token management and estimation systems for cost control',
        'Design rate limiting and error handling patterns for production AI applications',
        'Implement streaming text components with real-time response rendering',
        'Build provider switching mechanisms with fallback strategies and load balancing',
      ],
      hints: [
        'Use Vercel AI SDK streaming utilities for real-time response rendering',
        'Implement provider abstraction to easily switch between OpenAI, Anthropic, etc.',
        'Add token estimation before requests to manage costs and prevent overruns',
        'Include rate limiting to handle API quotas and prevent abuse',
        'Design error handling for network issues, API errors, and quota limits',
        'Create reusable chat interface components with streaming support',
      ],
      estimatedTime: 60,
      filePath: './exercise-files/ai-integration/01-vercel-ai-sdk-fundamentals/exercise.tsx',
      solutionPath: './src/exercises/ai-integration/01-vercel-ai-sdk-fundamentals/solution.tsx',
      testsPath: './src/exercises/ai-integration/01-vercel-ai-sdk-fundamentals/test.ts',
      instructionsPath: './src/exercises/ai-integration/01-vercel-ai-sdk-fundamentals/instructions.md',
    },
    {
      id: '02-mcp-protocol-integration',
      title: 'MCP Protocol Integration',
      description: 'Implement Model Context Protocol (MCP) for advanced tool calling and bidirectional AI communication',
      category: 'ai-integration',
      difficulty: 4,
      prerequisites: ['01-vercel-ai-sdk-fundamentals'],
      learningObjectives: [
        'Master Model Context Protocol (MCP) implementation for advanced AI tool integration',
        'Build comprehensive tool registry systems with schema validation and type safety',
        'Create bidirectional communication patterns between AI models and application tools',
        'Design context management systems for persistent tool state and conversation context',
        'Implement protocol validation and error handling for reliable MCP communication',
        'Build tool definition systems with automatic schema generation and documentation',
      ],
      hints: [
        'Use MCP TypeScript SDK for type-safe protocol implementation',
        'Create tool registry with schema validation for reliable tool calling',
        'Implement bidirectional communication for tool results and context updates',
        'Design context persistence for maintaining state across tool interactions',
        'Add protocol validation to ensure MCP compliance and error detection',
        'Build tool documentation generation for developer experience',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/ai-integration/02-mcp-protocol-integration/exercise.tsx',
      solutionPath: './src/exercises/ai-integration/02-mcp-protocol-integration/solution.tsx',
      testsPath: './src/exercises/ai-integration/02-mcp-protocol-integration/test.ts',
      instructionsPath: './src/exercises/ai-integration/02-mcp-protocol-integration/instructions.md',
    },
    {
      id: '03-ai-state-management',
      title: 'AI State Management',
      description: 'Build sophisticated AI conversation state management with context persistence, windowing, and state synchronization',
      category: 'ai-integration',
      difficulty: 4,
      prerequisites: ['01-vercel-ai-sdk-fundamentals', '02-mcp-protocol-integration'],
      learningObjectives: [
        'Design comprehensive conversation state management with persistent storage and recovery',
        'Implement context windowing strategies for managing long conversations within token limits',
        'Build state synchronization systems for real-time conversation updates across multiple clients',
        'Create conversation branching and versioning for exploring multiple AI interaction paths',
        'Develop state hydration and serialization patterns for reliable conversation persistence',
        'Master conversation history management with search, filtering, and organization capabilities',
      ],
      hints: [
        'Use Zustand or Redux for centralized conversation state management',
        'Implement context windowing to manage token limits in long conversations',
        'Create state persistence with localStorage and database synchronization',
        'Design conversation branching for exploring alternative conversation paths',
        'Add state recovery mechanisms for handling interruptions and errors',
        'Build conversation search and filtering for managing conversation history',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/ai-integration/03-ai-state-management/exercise.tsx',
      solutionPath: './src/exercises/ai-integration/03-ai-state-management/solution.tsx',
      testsPath: './src/exercises/ai-integration/03-ai-state-management/test.ts',
      instructionsPath: './src/exercises/ai-integration/03-ai-state-management/instructions.md',
    },
    {
      id: '04-streaming-ui-patterns',
      title: 'Streaming UI Patterns',
      description: 'Master advanced streaming UI patterns and user experience design for AI applications with real-time content rendering',
      category: 'ai-integration',
      difficulty: 4,
      prerequisites: ['01-vercel-ai-sdk-fundamentals'],
      learningObjectives: [
        'Build sophisticated streaming markdown components with real-time parsing and syntax highlighting',
        'Create natural typewriter effects with variable timing and punctuation handling',
        'Implement intelligent progress indicators with time estimation and completion tracking',
        'Design interruptible streaming systems with pause, resume, and cancellation controls',
        'Master streaming performance optimization with efficient rendering and memory management',
        'Develop responsive streaming interfaces with adaptive layouts and user feedback',
      ],
      hints: [
        'Use progressive markdown parsing for smooth real-time rendering',
        'Implement variable timing for natural typewriter animation effects',
        'Create intelligent progress estimation based on content analysis',
        'Design streaming controls with proper state management and recovery',
        'Optimize rendering performance with efficient DOM updates',
        'Add responsive design for optimal streaming experience across devices',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/ai-integration/04-streaming-ui-patterns/exercise.tsx',
      solutionPath: './src/exercises/ai-integration/04-streaming-ui-patterns/solution.tsx',
      testsPath: './src/exercises/ai-integration/04-streaming-ui-patterns/test.ts',
      instructionsPath: './src/exercises/ai-integration/04-streaming-ui-patterns/instructions.md',
    },
    {
      id: '05-tool-calling-integration',
      title: 'Tool Calling Integration',
      description: 'Implement advanced AI tool calling and function execution patterns for building sophisticated AI applications',
      category: 'ai-integration',
      difficulty: 5,
      prerequisites: ['02-mcp-protocol-integration', '04-streaming-ui-patterns'],
      learningObjectives: [
        'Build comprehensive tool calling systems with function registration and execution orchestration',
        'Implement secure function execution environments with sandboxing and validation',
        'Create robust parameter validation systems with schema enforcement and type safety',
        'Design intelligent result processing with multi-format rendering and visualization',
        'Develop production-ready security features with access control and execution monitoring',
        'Master tool orchestration with dependency management and parallel execution',
      ],
      hints: [
        'Use Zod for comprehensive parameter validation and schema enforcement',
        'Implement execution sandboxing for secure function execution',
        'Create dynamic tool registry with runtime registration and discovery',
        'Design result rendering with multiple format support and visualization',
        'Add execution monitoring with performance metrics and security tracking',
        'Build tool composition with workflow orchestration and dependency management',
      ],
      estimatedTime: 90,
      filePath: './exercise-files/ai-integration/05-tool-calling-integration/exercise.tsx',
      solutionPath: './src/exercises/ai-integration/05-tool-calling-integration/solution.tsx',
      testsPath: './src/exercises/ai-integration/05-tool-calling-integration/test.ts',
      instructionsPath: './src/exercises/ai-integration/05-tool-calling-integration/instructions.md',
    },
    {
      id: '06-multimodal-ai-handling',
      title: 'Multimodal AI Handling',
      description: 'Master advanced multimodal AI integration and content processing for diverse input types with intelligent analysis',
      category: 'ai-integration',
      difficulty: 5,
      prerequisites: ['04-streaming-ui-patterns', '05-tool-calling-integration'],
      learningObjectives: [
        'Master comprehensive multimodal AI systems with unified interfaces and cross-modal understanding',
        'Implement intelligent content processing pipelines with format detection and adaptive analysis',
        'Create sophisticated media analysis systems with AI-powered insights and metadata extraction',
        'Design seamless upload interfaces with drag-and-drop, validation, and progress tracking',
        'Build production-ready processing workflows with queuing and batch processing',
        'Develop cross-modal features with content correlation and intelligent recommendations',
      ],
      hints: [
        'Use Dropzone for intuitive multi-format file upload interfaces',
        'Implement AI-powered content analysis with multiple model integration',
        'Create intelligent format detection with comprehensive validation',
        'Design cross-modal correlation for content relationship discovery',
        'Add processing queue management with priority and resource optimization',
        'Build results visualization with interactive display and export capabilities',
      ],
      estimatedTime: 90,
      filePath: './exercise-files/ai-integration/06-multimodal-ai-handling/exercise.tsx',
      solutionPath: './src/exercises/ai-integration/06-multimodal-ai-handling/solution.tsx',
      testsPath: './src/exercises/ai-integration/06-multimodal-ai-handling/test.ts',
      instructionsPath: './src/exercises/ai-integration/06-multimodal-ai-handling/instructions.md',
    },
    {
      id: '07-ai-performance-optimization',
      title: 'AI Performance Optimization',
      description: 'Master advanced performance optimization and cost management patterns for AI applications with intelligent batching and caching',
      category: 'ai-integration',
      difficulty: 5,
      prerequisites: ['01-vercel-ai-sdk-fundamentals', '03-ai-state-management'],
      learningObjectives: [
        'Build intelligent request batching systems with deduplication, similarity detection, and priority management',
        'Create sophisticated response caching with LRU policies, semantic hashing, and content-aware expiration',
        'Implement comprehensive token optimization with prompt compression and cost-aware processing',
        'Design real-time cost tracking with budget management, trend analysis, and predictive monitoring',
        'Develop performance monitoring with throughput analysis, efficiency tracking, and optimization recommendations',
        'Master cost optimization with automated waste detection, resource efficiency, and intelligent scaling',
      ],
      hints: [
        'Use request similarity detection to batch similar requests for efficiency',
        'Implement LRU cache with semantic key generation for intelligent caching',
        'Create token counting and prompt compression for cost optimization',
        'Add real-time cost tracking with budget alerts and predictive analysis',
        'Build performance dashboards with comprehensive metrics and insights',
        'Design optimization engines with automated recommendations and tuning',
      ],
      estimatedTime: 90,
      filePath: './exercise-files/ai-integration/07-ai-performance-optimization/exercise.tsx',
      solutionPath: './src/exercises/ai-integration/07-ai-performance-optimization/solution.tsx',
      testsPath: './src/exercises/ai-integration/07-ai-performance-optimization/test.ts',
      instructionsPath: './src/exercises/ai-integration/07-ai-performance-optimization/instructions.md',
    },
    {
      id: '08-ai-error-handling-resilience',
      title: 'AI Error Handling & Resilience',
      description: 'Implement advanced error handling and resilience patterns for robust, production-ready AI applications',
      category: 'ai-integration',
      difficulty: 5,
      prerequisites: ['01-vercel-ai-sdk-fundamentals', '07-ai-performance-optimization'],
      learningObjectives: [
        'Master comprehensive resilience systems with circuit breakers, bulkheads, and timeout management',
        'Implement intelligent retry mechanisms with exponential backoff, jitter, and adaptive algorithms',
        'Create multi-provider systems with automatic switching, health monitoring, and intelligent routing',
        'Build sophisticated rate limit handling with adaptive throttling, queuing, and quota management',
        'Design intelligent error classification with recovery strategies and escalation procedures',
        'Develop comprehensive monitoring with alerting, diagnostics, and performance tracking',
      ],
      hints: [
        'Implement exponential backoff with jitter to prevent thundering herd problems',
        'Create circuit breakers with proper state management and failure detection',
        'Build provider health monitoring with continuous assessment and failover',
        'Add rate limit detection with intelligent header parsing and adaptive throttling',
        'Design error classification with recoverable vs non-recoverable error detection',
        'Create monitoring dashboards with real-time metrics and alerting systems',
      ],
      estimatedTime: 90,
      filePath: './exercise-files/ai-integration/08-ai-error-handling-resilience/exercise.tsx',
      solutionPath: './src/exercises/ai-integration/08-ai-error-handling-resilience/solution.tsx',
      testsPath: './src/exercises/ai-integration/08-ai-error-handling-resilience/test.ts',
      instructionsPath: './src/exercises/ai-integration/08-ai-error-handling-resilience/instructions.md',
    },
  ],
};