import type { ExerciseCategory } from '@/types';

export const fullStackIntegrationCategory: ExerciseCategory = {
  id: 'full-stack-integration',
  name: 'Full-Stack Integration Fundamentals',
  description: 'Master end-to-end application development patterns that Staff Frontend Engineers must understand, bridging React expertise with backend integration patterns used in scalable production applications',
  icon: 'IconStack',
  order: 8,
  exercises: [
    {
      id: '01-api-client-architecture',
      title: 'API Client Architecture',
      description: 'Design structured API clients with TypeScript, Axios interceptors, error handling, and authentication flows for scalable applications',
      category: 'full-stack-integration',
      difficulty: 3,
      prerequisites: [],
      learningObjectives: [
        'Design scalable API client architecture with TypeScript',
        'Implement Axios interceptors for request/response transformation',
        'Handle authentication flows and token management',
        'Create robust error handling and retry mechanisms',
        'Build request deduplication and caching strategies',
        'Integrate runtime validation with Zod schemas',
      ],
      hints: [
        'Use TypeScript interfaces to define API contracts and responses',
        'Implement interceptors for auth headers, error handling, and logging',
        'Create a base ApiClient class with common functionality',
        'Use Zod for runtime validation of API responses',
        'Implement exponential backoff for retry logic',
        'Deduplicate concurrent requests to the same endpoint',
      ],
      estimatedTime: 60,
      filePath: './exercise-files/full-stack-integration/01-api-client-architecture/exercise.tsx',
      solutionPath: './src/exercises/full-stack-integration/01-api-client-architecture/solution.tsx',
      testsPath: './src/exercises/full-stack-integration/01-api-client-architecture/test.ts',
      instructionsPath: './src/exercises/full-stack-integration/01-api-client-architecture/instructions.md',
    },
    {
      id: '02-data-fetching-patterns',
      title: 'Modern Data Fetching Patterns',
      description: 'Master modern data fetching with TanStack Query, including caching strategies, optimistic updates, and background refetching patterns',
      category: 'full-stack-integration',
      difficulty: 4,
      prerequisites: ['01-api-client-architecture'],
      learningObjectives: [
        'Implement TanStack Query for intelligent data fetching',
        'Design effective caching strategies and cache invalidation',
        'Handle optimistic updates and rollback mechanisms',
        'Create background refetching and stale-while-revalidate patterns',
        'Implement offline detection and queue management',
        'Build pagination and infinite query patterns',
      ],
      hints: [
        'Use TanStack Query for automatic background refetching',
        'Implement proper cache keys for granular invalidation',
        'Handle optimistic updates with onMutate and onError',
        'Use staleTime and cacheTime for performance optimization',
        'Implement request cancellation with AbortController',
        'Create custom hooks for common data fetching patterns',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/full-stack-integration/02-data-fetching-patterns/exercise.tsx',
      solutionPath: './src/exercises/full-stack-integration/02-data-fetching-patterns/solution.tsx',
      testsPath: './src/exercises/full-stack-integration/02-data-fetching-patterns/test.ts',
      instructionsPath: './src/exercises/full-stack-integration/02-data-fetching-patterns/instructions.md',
    },
    {
      id: '03-form-handling-validation',
      title: 'Enterprise Form Handling & Validation',
      description: 'Build enterprise-grade forms with React Hook Form, Zod validation, server-side validation integration, and complex field dependencies',
      category: 'full-stack-integration',
      difficulty: 4,
      prerequisites: ['01-api-client-architecture', '02-data-fetching-patterns'],
      learningObjectives: [
        'Master React Hook Form for complex form scenarios',
        'Integrate Zod schemas for comprehensive validation',
        'Handle server-side validation and error mapping',
        'Implement dynamic field dependencies and conditional logic',
        'Create reusable form components and validation patterns',
        'Build async validation and debounced field validation',
      ],
      hints: [
        'Use React Hook Form with Zod resolver for validation',
        'Implement field dependencies with watch and useEffect',
        'Handle server validation errors with setError',
        'Create custom form components with forwardRef',
        'Use debounced validation for async field checks',
        'Implement form state persistence for better UX',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/full-stack-integration/03-form-handling-validation/exercise.tsx',
      solutionPath: './src/exercises/full-stack-integration/03-form-handling-validation/solution.tsx',
      testsPath: './src/exercises/full-stack-integration/03-form-handling-validation/test.ts',
      instructionsPath: './src/exercises/full-stack-integration/03-form-handling-validation/instructions.md',
    },
    {
      id: '04-authentication-flows',
      title: 'Authentication Flows',
      description: 'Implement complete authentication systems with JWT handling, refresh tokens, PKCE flow, and session management for secure applications',
      category: 'full-stack-integration',
      difficulty: 4,
      prerequisites: ['01-api-client-architecture', '02-data-fetching-patterns'],
      learningObjectives: [
        'Implement JWT-based authentication with refresh tokens',
        'Build PKCE flow for enhanced security in SPAs',
        'Create session management with automatic token refresh',
        'Design route protection and authentication guards',
        'Handle authentication state across the application',
        'Implement secure logout and session termination',
      ],
      hints: [
        'Store tokens securely using httpOnly cookies or secure storage',
        'Implement PKCE flow for authorization code with code verifier',
        'Use Axios interceptors for automatic token refresh',
        'Create higher-order components for route protection',
        'Handle authentication redirects and deep linking',
        'Implement proper cleanup on logout and token expiration',
      ],
      estimatedTime: 90,
      filePath: './exercise-files/full-stack-integration/04-authentication-flows/exercise.tsx',
      solutionPath: './src/exercises/full-stack-integration/04-authentication-flows/solution.tsx',
      testsPath: './src/exercises/full-stack-integration/04-authentication-flows/test.ts',
      instructionsPath: './src/exercises/full-stack-integration/04-authentication-flows/instructions.md',
    },
    {
      id: '05-authorization-rbac',
      title: 'Authorization & RBAC',
      description: 'Build role-based access control systems with dynamic permissions, hierarchical roles, and feature flags for enterprise applications',
      category: 'full-stack-integration',
      difficulty: 5,
      prerequisites: ['04-authentication-flows'],
      learningObjectives: [
        'Design role-based access control (RBAC) systems',
        'Implement dynamic permissions and permission inheritance',
        'Create feature flags and conditional rendering',
        'Build audit logging for security compliance',
        'Handle permission-based UI rendering and navigation',
        'Implement permission caching and optimization',
      ],
      hints: [
        'Use CASL or similar libraries for permission management',
        'Implement hierarchical role structures with inheritance',
        'Create permission-based components and route guards',
        'Use React Context for global permission state',
        'Implement audit trails for security compliance',
        'Cache permissions for performance optimization',
      ],
      estimatedTime: 90,
      filePath: './exercise-files/full-stack-integration/05-authorization-rbac/exercise.tsx',
      solutionPath: './src/exercises/full-stack-integration/05-authorization-rbac/solution.tsx',
      testsPath: './src/exercises/full-stack-integration/05-authorization-rbac/test.ts',
      instructionsPath: './src/exercises/full-stack-integration/05-authorization-rbac/instructions.md',
    },
    {
      id: '06-security-patterns',
      title: 'Security Patterns',
      description: 'Implement frontend security best practices including CSP, XSS prevention, secure storage, and OWASP compliance for production applications',
      category: 'full-stack-integration',
      difficulty: 5,
      prerequisites: ['04-authentication-flows', '05-authorization-rbac'],
      learningObjectives: [
        'Implement Content Security Policy (CSP) headers',
        'Prevent XSS attacks with input sanitization',
        'Design secure storage strategies for sensitive data',
        'Build comprehensive input validation systems',
        'Apply OWASP security guidelines and compliance',
        'Create threat modeling and security assessment tools',
      ],
      hints: [
        'Use DOMPurify for XSS prevention and HTML sanitization',
        'Implement CSP headers with nonce-based script execution',
        'Use secure-ls or similar for encrypted local storage',
        'Validate all user inputs on both client and server side',
        'Implement rate limiting and request throttling',
        'Create security headers and middleware integration',
      ],
      estimatedTime: 90,
      filePath: './exercise-files/full-stack-integration/06-security-patterns/exercise.tsx',
      solutionPath: './src/exercises/full-stack-integration/06-security-patterns/solution.tsx',
      testsPath: './src/exercises/full-stack-integration/06-security-patterns/test.ts',
      instructionsPath: './src/exercises/full-stack-integration/06-security-patterns/instructions.md',
    },
    {
      id: '07-websocket-integration',
      title: 'WebSocket Integration',
      description: 'Implement robust WebSocket communication with React integration, connection management, and message handling for real-time applications',
      category: 'full-stack-integration',
      difficulty: 4,
      prerequisites: ['01-api-client-architecture', '02-data-fetching-patterns'],
      learningObjectives: [
        'Implement WebSocket lifecycle management with React',
        'Build connection management with auto-reconnection logic',
        'Create message queuing and buffering systems',
        'Design real-time UI patterns with connection status',
        'Handle WebSocket errors and connection recovery',
        'Integrate Socket.IO patterns with native WebSocket API',
      ],
      hints: [
        'Use WebSocketProvider for managing connection state across components',
        'Implement message queuing for offline/reconnection scenarios',
        'Create connection status indicators for better UX',
        'Handle WebSocket lifecycle with useEffect cleanup',
        'Implement exponential backoff for reconnection attempts',
        'Buffer messages when connection is lost and replay on reconnect',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/full-stack-integration/07-websocket-integration/exercise.tsx',
      solutionPath: './src/exercises/full-stack-integration/07-websocket-integration/solution.tsx',
      testsPath: './src/exercises/full-stack-integration/07-websocket-integration/test.ts',
      instructionsPath: './src/exercises/full-stack-integration/07-websocket-integration/instructions.md',
    },
    {
      id: '08-real-time-collaboration',
      title: 'Real-time Collaboration',
      description: 'Build collaborative editing systems with operational transforms, conflict resolution, and presence awareness for multi-user applications',
      category: 'full-stack-integration',
      difficulty: 5,
      prerequisites: ['07-websocket-integration'],
      learningObjectives: [
        'Implement collaborative editing with operational transforms',
        'Build conflict resolution mechanisms for concurrent edits',
        'Create presence awareness and cursor synchronization',
        'Design version control and change tracking systems',
        'Handle multi-user state synchronization',
        'Implement undo/redo with collaborative context',
      ],
      hints: [
        'Use operational transforms or CRDTs for conflict-free editing',
        'Implement presence indicators showing active users and cursors',
        'Create version control with branching and merging capabilities',
        'Handle concurrent operations with transformation algorithms',
        'Build real-time cursors and selection synchronization',
        'Design undo/redo that respects collaborative changes',
      ],
      estimatedTime: 90,
      filePath: './exercise-files/full-stack-integration/08-real-time-collaboration/exercise.tsx',
      solutionPath: './src/exercises/full-stack-integration/08-real-time-collaboration/solution.tsx',
      testsPath: './src/exercises/full-stack-integration/08-real-time-collaboration/test.tsx',
      instructionsPath: './src/exercises/full-stack-integration/08-real-time-collaboration/instructions.md',
    },
    {
      id: '09-server-sent-events',
      title: 'Server-Sent Events',
      description: 'Implement Server-Sent Events for real-time notifications, system monitoring, and live updates with graceful degradation patterns',
      category: 'full-stack-integration',
      difficulty: 4,
      prerequisites: ['01-api-client-architecture', '02-data-fetching-patterns'],
      learningObjectives: [
        'Implement EventSource API for server-sent events',
        'Build notification systems with real-time updates',
        'Create automatic reconnection and error handling',
        'Design event filtering and subscription management',
        'Handle system monitoring and health checks',
        'Implement graceful degradation for unsupported browsers',
      ],
      hints: [
        'Use EventSource API with proper error handling and reconnection',
        'Implement event filtering to handle specific event types',
        'Create notification center with persistence and dismissal',
        'Build health monitoring with connection status indicators',
        'Design fallback patterns for browsers without SSE support',
        'Handle authentication and authorization for SSE endpoints',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/full-stack-integration/09-server-sent-events/exercise.tsx',
      solutionPath: './src/exercises/full-stack-integration/09-server-sent-events/solution.tsx',
      testsPath: './src/exercises/full-stack-integration/09-server-sent-events/test.ts',
      instructionsPath: './src/exercises/full-stack-integration/09-server-sent-events/instructions.md',
    },
    {
      id: '10-database-integration',
      title: 'Database Integration',
      description: 'Master frontend patterns for database integration including connection management, query building, transaction handling, and cache synchronization',
      category: 'full-stack-integration',
      difficulty: 5,
      prerequisites: ['01-api-client-architecture', '02-data-fetching-patterns'],
      learningObjectives: [
        'Implement database connection management with retry logic',
        'Build type-safe query builders with SQL generation',
        'Create transaction management with optimistic updates',
        'Design cache synchronization with conflict resolution',
        'Handle database errors and recovery patterns',
        'Integrate Prisma/Supabase patterns for production use',
      ],
      hints: [
        'Use React Context for database connection state management',
        'Implement query builders with fluent interfaces and parameterized queries',
        'Handle optimistic updates with rollback mechanisms',
        'Create cache sync with timestamp-based conflict detection',
        'Design connection pooling and health monitoring',
        'Build database migration and schema management tools',
      ],
      estimatedTime: 90,
      filePath: './exercise-files/full-stack-integration/10-database-integration/index.tsx',
      solutionPath: './exercise-files/full-stack-integration/10-database-integration/solution.tsx',
      testsPath: './exercise-files/full-stack-integration/10-database-integration/test.ts',
      instructionsPath: './exercise-files/full-stack-integration/10-database-integration/instructions.md',
    },
    {
      id: '11-file-upload-management',
      title: 'File Upload Management',
      description: 'Build enterprise file upload systems with chunked uploads, progress tracking, cloud storage integration, and client-side image processing',
      category: 'full-stack-integration',
      difficulty: 4,
      prerequisites: ['01-api-client-architecture'],
      learningObjectives: [
        'Implement chunked file uploads with resume capability',
        'Build real-time progress tracking and speed monitoring',
        'Create multi-provider cloud storage integration',
        'Design client-side image processing and optimization',
        'Handle upload errors and retry mechanisms',
        'Build drag-and-drop interfaces with validation',
      ],
      hints: [
        'Use FileReader API and Blob.slice() for chunked uploads',
        'Implement progress tracking with upload speed calculations',
        'Abstract cloud providers (AWS S3, Cloudinary, Firebase)',
        'Use Canvas API for client-side image resizing and compression',
        'Create upload queues with concurrent processing limits',
        'Design file validation with type and size checking',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/full-stack-integration/11-file-upload-management/index.tsx',
      solutionPath: './exercise-files/full-stack-integration/11-file-upload-management/solution.tsx',
      testsPath: './exercise-files/full-stack-integration/11-file-upload-management/test.ts',
      instructionsPath: './exercise-files/full-stack-integration/11-file-upload-management/instructions.md',
    },
    {
      id: '12-microservices-coordination',
      title: 'Microservices Coordination',
      description: 'Implement frontend coordination of microservices with circuit breakers, service monitoring, graceful degradation, and distributed system patterns',
      category: 'full-stack-integration',
      difficulty: 5,
      prerequisites: ['01-api-client-architecture', '02-data-fetching-patterns'],
      learningObjectives: [
        'Build service orchestration with load balancing strategies',
        'Implement circuit breaker patterns for fault tolerance',
        'Create comprehensive service health monitoring',
        'Design graceful degradation and fallback mechanisms',
        'Handle distributed tracing and request correlation',
        'Build service discovery and endpoint management',
      ],
      hints: [
        'Implement circuit breaker state machine (closed/open/half-open)',
        'Use weighted round-robin and least-connections load balancing',
        'Create health check systems with threshold-based alerting',
        'Design multi-tier degradation levels with feature flags',
        'Build request correlation with trace IDs across services',
        'Implement service registry with dynamic endpoint discovery',
      ],
      estimatedTime: 90,
      filePath: './exercise-files/full-stack-integration/12-microservices-coordination/index.tsx',
      solutionPath: './exercise-files/full-stack-integration/12-microservices-coordination/solution.tsx',
      testsPath: './exercise-files/full-stack-integration/12-microservices-coordination/test.ts',
      instructionsPath: './exercise-files/full-stack-integration/12-microservices-coordination/instructions.md',
    },
  ],
};