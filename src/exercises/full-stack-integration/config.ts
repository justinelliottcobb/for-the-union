import type { ExerciseCategory } from '@/types';

export const fullStackIntegrationCategory: ExerciseCategory = {
  id: 'full-stack-integration',
  name: 'Full-Stack Integration Fundamentals',
  description: 'Master end-to-end application development patterns that Staff Frontend Engineers must understand, bridging React expertise with backend integration patterns used in scalable production applications',
  icon: 'IconStack',
  order: 8,
  exercises: [
    {
      id: '01-api-client-architecture',
      title: 'API Client Architecture',
      description: 'Design structured API clients with TypeScript, Axios interceptors, error handling, and authentication flows for scalable applications',
      category: 'full-stack-integration',
      difficulty: 3,
      prerequisites: [],
      learningObjectives: [
        'Design scalable API client architecture with TypeScript',
        'Implement Axios interceptors for request/response transformation',
        'Handle authentication flows and token management',
        'Create robust error handling and retry mechanisms',
        'Build request deduplication and caching strategies',
        'Integrate runtime validation with Zod schemas',
      ],
      hints: [
        'Use TypeScript interfaces to define API contracts and responses',
        'Implement interceptors for auth headers, error handling, and logging',
        'Create a base ApiClient class with common functionality',
        'Use Zod for runtime validation of API responses',
        'Implement exponential backoff for retry logic',
        'Deduplicate concurrent requests to the same endpoint',
      ],
      estimatedTime: 60,
      filePath: './exercise-files/full-stack-integration/01-api-client-architecture/exercise.tsx',
      solutionPath: './src/exercises/full-stack-integration/01-api-client-architecture/solution.tsx',
      testsPath: './src/exercises/full-stack-integration/01-api-client-architecture/test.ts',
      instructionsPath: './src/exercises/full-stack-integration/01-api-client-architecture/instructions.md',
    },
    {
      id: '02-data-fetching-patterns',
      title: 'Modern Data Fetching Patterns',
      description: 'Master modern data fetching with TanStack Query, including caching strategies, optimistic updates, and background refetching patterns',
      category: 'full-stack-integration',
      difficulty: 4,
      prerequisites: ['01-api-client-architecture'],
      learningObjectives: [
        'Implement TanStack Query for intelligent data fetching',
        'Design effective caching strategies and cache invalidation',
        'Handle optimistic updates and rollback mechanisms',
        'Create background refetching and stale-while-revalidate patterns',
        'Implement offline detection and queue management',
        'Build pagination and infinite query patterns',
      ],
      hints: [
        'Use TanStack Query for automatic background refetching',
        'Implement proper cache keys for granular invalidation',
        'Handle optimistic updates with onMutate and onError',
        'Use staleTime and cacheTime for performance optimization',
        'Implement request cancellation with AbortController',
        'Create custom hooks for common data fetching patterns',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/full-stack-integration/02-data-fetching-patterns/exercise.tsx',
      solutionPath: './src/exercises/full-stack-integration/02-data-fetching-patterns/solution.tsx',
      testsPath: './src/exercises/full-stack-integration/02-data-fetching-patterns/test.ts',
      instructionsPath: './src/exercises/full-stack-integration/02-data-fetching-patterns/instructions.md',
    },
    {
      id: '03-form-handling-validation',
      title: 'Enterprise Form Handling & Validation',
      description: 'Build enterprise-grade forms with React Hook Form, Zod validation, server-side validation integration, and complex field dependencies',
      category: 'full-stack-integration',
      difficulty: 4,
      prerequisites: ['01-api-client-architecture', '02-data-fetching-patterns'],
      learningObjectives: [
        'Master React Hook Form for complex form scenarios',
        'Integrate Zod schemas for comprehensive validation',
        'Handle server-side validation and error mapping',
        'Implement dynamic field dependencies and conditional logic',
        'Create reusable form components and validation patterns',
        'Build async validation and debounced field validation',
      ],
      hints: [
        'Use React Hook Form with Zod resolver for validation',
        'Implement field dependencies with watch and useEffect',
        'Handle server validation errors with setError',
        'Create custom form components with forwardRef',
        'Use debounced validation for async field checks',
        'Implement form state persistence for better UX',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/full-stack-integration/03-form-handling-validation/exercise.tsx',
      solutionPath: './src/exercises/full-stack-integration/03-form-handling-validation/solution.tsx',
      testsPath: './src/exercises/full-stack-integration/03-form-handling-validation/test.ts',
      instructionsPath: './src/exercises/full-stack-integration/03-form-handling-validation/instructions.md',
    },
  ],
};