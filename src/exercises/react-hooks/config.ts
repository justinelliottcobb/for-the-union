import type { ExerciseCategory } from '@/types';

export const reactHooksCategory: ExerciseCategory = {
  id: 'react-hooks',
  name: 'React Hooks Mastery',
  description: 'Master React hooks through progressive, hands-on exercises covering all essential patterns',
  icon: 'IconHook',
  order: 2,
  exercises: [
    {
      id: '01-usestate-fundamentals',
      title: 'useState Fundamentals',
      description: 'Master the basics of React useState hook for managing component state',
      category: 'react-hooks',
      difficulty: 2,
      prerequisites: [],
      learningObjectives: [
        'Understand useState basics and syntax',
        'Learn how state updates trigger re-renders',
        'Practice with different data types in state',
        'Handle form inputs with controlled components',
        'Use functional updates for state based on previous state',
      ],
      hints: [
        'useState returns an array with current state and setter function',
        'State updates trigger component re-renders',
        'Use functional updates for state based on previous state',
        'Always use the setter function, never mutate state directly',
        'TypeScript can infer types from initial values',
      ],
      estimatedTime: 20,
      filePath: './exercise-files/react-hooks/01-usestate-fundamentals/exercise.tsx',
      solutionPath: './src/exercises/react-hooks/01-usestate-fundamentals/solution.tsx',
      testsPath: './src/exercises/react-hooks/01-usestate-fundamentals/tests.ts',
      instructionsPath: './src/exercises/react-hooks/01-usestate-fundamentals/instructions.md',
    },
    {
      id: '02-useeffect-lifecycle',
      title: 'useEffect Lifecycle Management',
      description: 'Master React\'s useEffect hook for handling side effects and lifecycle events',
      category: 'react-hooks',
      difficulty: 3,
      prerequisites: ['01-usestate-fundamentals'],
      learningObjectives: [
        'Understand useEffect basics and dependency arrays',
        'Learn to handle component mounting and unmounting',
        'Practice cleanup functions to prevent memory leaks',
        'Manage async operations with useEffect',
        'Handle multiple effects and their interactions',
        'Debug infinite re-render loops',
      ],
      hints: [
        'useEffect runs after the render is committed to the screen',
        'Empty dependency array [] means effect runs only once after mount',
        'Missing dependency array means effect runs after every render',
        'Cleanup function runs before component unmounts or effect re-runs',
        'Use async functions inside useEffect, don\'t make useEffect itself async',
        'Always include state/props used inside effect in dependency array',
      ],
      estimatedTime: 30,
      filePath: './exercise-files/react-hooks/02-useeffect-lifecycle/exercise.tsx',
      solutionPath: './src/exercises/react-hooks/02-useeffect-lifecycle/solution.tsx',
      testsPath: './src/exercises/react-hooks/02-useeffect-lifecycle/tests.ts',
      instructionsPath: './src/exercises/react-hooks/02-useeffect-lifecycle/instructions.md',
    },
    {
      id: '03-usecontext-data-sharing',
      title: 'useContext Data Sharing',
      description: 'Master React\'s Context API for sharing data across component trees',
      category: 'react-hooks',
      difficulty: 3,
      prerequisites: ['01-usestate-fundamentals', '02-useeffect-lifecycle'],
      learningObjectives: [
        'Understand Context API and useContext hook',
        'Learn to share state across component trees',
        'Practice creating custom context providers',
        'Handle context updates and re-renders',
        'Implement theme and user authentication patterns',
      ],
      hints: [
        'Create context with createContext and provide default value',
        'Wrap components with Provider to share context down the tree',
        'Use useContext hook to consume context in any descendant',
        'Custom hooks can encapsulate context logic and validation',
        'Context triggers re-renders in all consuming components',
      ],
      estimatedTime: 25,
      filePath: './exercise-files/react-hooks/03-usecontext-data-sharing/exercise.tsx',
      solutionPath: './src/exercises/react-hooks/03-usecontext-data-sharing/solution.tsx',
      testsPath: './src/exercises/react-hooks/03-usecontext-data-sharing/tests.ts',
      instructionsPath: './src/exercises/react-hooks/03-usecontext-data-sharing/instructions.md',
    },
    {
      id: '04-custom-hooks',
      title: 'Custom Hooks Creation',
      description: 'Learn to create reusable custom hooks for common patterns',
      category: 'react-hooks',
      difficulty: 4,
      prerequisites: ['01-usestate-fundamentals', '02-useeffect-lifecycle'],
      learningObjectives: [
        'Understand custom hook patterns and conventions',
        'Learn to extract and reuse stateful logic',
        'Practice creating hooks for common use cases',
        'Handle async operations in custom hooks',
        'Create hooks that return multiple values and functions',
      ],
      hints: [
        'Custom hooks must start with "use" prefix',
        'Extract common stateful logic into reusable functions',
        'Return arrays for ordered values, objects for named values',
        'Custom hooks can use other hooks internally',
        'Test custom hooks by using them in components',
      ],
      estimatedTime: 35,
      filePath: './exercise-files/react-hooks/04-custom-hooks/exercise.tsx',
      solutionPath: './src/exercises/react-hooks/04-custom-hooks/solution.tsx',
      testsPath: './src/exercises/react-hooks/04-custom-hooks/tests.ts',
      instructionsPath: './src/exercises/react-hooks/04-custom-hooks/instructions.md',
    },
    {
      id: '05-useref-caching',
      title: 'useRef Caching & Performance',
      description: 'Master useRef for caching, DOM manipulation, and performance optimization',
      category: 'react-hooks',
      difficulty: 4,
      prerequisites: ['01-usestate-fundamentals', '02-useeffect-lifecycle'],
      learningObjectives: [
        'Understand useRef for mutable value storage without re-renders',
        'Learn to cache expensive computations and API responses',
        'Practice DOM manipulation and focus management',
        'Handle previous values and callback refs',
        'Implement performance optimizations with ref-based caching',
        'Avoid common useRef pitfalls and memory leaks',
      ],
      hints: [
        'useRef doesn\'t trigger re-renders when .current changes',
        'Perfect for storing values that don\'t affect the UI',
        'Use for caching expensive computations between renders',
        'Great for DOM manipulation and focus management',
        'Implement TTL (time-to-live) for cache invalidation',
        'Clear caches on unmount to prevent memory leaks',
      ],
      estimatedTime: 30,
      filePath: './exercise-files/react-hooks/05-useref-caching/exercise.tsx',
      solutionPath: './src/exercises/react-hooks/05-useref-caching/solution.tsx',
      testsPath: './src/exercises/react-hooks/05-useref-caching/tests.ts',
      instructionsPath: './src/exercises/react-hooks/05-useref-caching/instructions.md',
    },
    {
      id: '06-useeffect-preloading',
      title: 'useEffect Data Preloading',
      description: 'Master advanced useEffect patterns for data preloading and performance optimization',
      category: 'react-hooks',
      difficulty: 5,
      prerequisites: ['02-useeffect-lifecycle', '04-custom-hooks'],
      learningObjectives: [
        'Implement intelligent data preloading strategies',
        'Learn background data fetching and cache warming',
        'Practice resource prioritization and loading optimization',
        'Handle complex async dependency chains',
        'Implement progressive loading and lazy loading patterns',
        'Master cleanup and cancellation for optimal performance',
      ],
      hints: [
        'Use AbortController to cancel unnecessary requests',
        'Implement request deduplication to avoid duplicate fetches',
        'Consider using Intersection Observer for lazy loading',
        'Prioritize critical data over nice-to-have data',
        'Use background sync for data freshness',
        'Implement proper error boundaries for failed preloads',
      ],
      estimatedTime: 40,
      filePath: './exercise-files/react-hooks/06-useeffect-preloading/exercise.tsx',
      solutionPath: './src/exercises/react-hooks/06-useeffect-preloading/solution.tsx',
      testsPath: './src/exercises/react-hooks/06-useeffect-preloading/tests.ts',
      instructionsPath: './src/exercises/react-hooks/06-useeffect-preloading/instructions.md',
    },
  ],
};