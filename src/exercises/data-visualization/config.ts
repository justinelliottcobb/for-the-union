import type { ExerciseCategory } from '@/types';

export const dataVisualizationCategory: ExerciseCategory = {
  id: 'data-visualization',
  name: 'Data Visualization',
  description: 'Master modern data visualization patterns for React applications with D3.js integration, custom visualizations, and performance optimization',
  icon: 'IconChartBar',
  order: 11,
  exercises: [
    {
      id: '01-d3-react-integration',
      title: 'D3-React Integration',
      description: 'Master D3.js integration patterns with React lifecycle management, SVG containers, scale coordination, and animation control systems',
      category: 'data-visualization',
      difficulty: 4,
      prerequisites: [],
      learningObjectives: [
        'Master D3-React integration with useRef patterns and lifecycle management',
        'Implement SVG container systems with responsive design and coordinate transformation',
        'Design scale management with intelligent domain calculation and multi-scale coordination',
        'Create animation controllers with transition orchestration and React synchronization',
        'Handle data binding between D3 selections and React state efficiently',
        'Build responsive charts with viewport adaptation and performance optimization'
      ],
      hints: [
        'Use useRef to bridge D3 DOM manipulation with React component lifecycle',
        'Implement proper cleanup in useEffect to prevent memory leaks',
        'Leverage D3\'s enter/update/exit pattern for efficient data binding',
        'Use ResizeObserver for responsive behavior without performance penalties',
        'Coordinate D3 transitions with React state updates for smooth UX'
      ],
      estimatedTime: 75,
      filePath: './exercise-files/data-visualization/01-d3-react-integration/exercise.tsx',
      solutionPath: './src/exercises/data-visualization/01-d3-react-integration/solution.tsx',
      testsPath: './src/exercises/data-visualization/01-d3-react-integration/test.ts',
      instructionsPath: './src/exercises/data-visualization/01-d3-react-integration/instructions.md',
    },
    {
      id: '02-d3-custom-visualizations',
      title: 'D3 Custom Visualizations',
      description: 'Build advanced custom visualizations including force-directed graphs, treemaps, Sankey diagrams, and custom axis systems with sophisticated interaction patterns',
      category: 'data-visualization',
      difficulty: 5,
      prerequisites: ['01-d3-react-integration'],
      learningObjectives: [
        'Master force-directed graphs with physics simulation and interactive manipulation',
        'Implement treemap visualizations with hierarchical navigation and zoom capabilities',
        'Design Sankey diagrams with flow calculation and interactive path editing',
        'Create custom axis systems with intelligent formatting and grid management',
        'Handle complex data structures for network, hierarchical, and flow visualizations',
        'Build advanced interaction patterns with brushing, zooming, and multi-touch support'
      ],
      hints: [
        'Use D3 force simulation for dynamic network layouts with interactive manipulation',
        'Implement hierarchical navigation with breadcrumb tracking for treemap exploration',
        'Leverage D3 Sankey layout for automatic flow calculation and positioning',
        'Create custom axis generators with intelligent tick placement and formatting',
        'Optimize complex visualizations with spatial indexing and selective rendering'
      ],
      estimatedTime: 90,
      filePath: './exercise-files/data-visualization/02-d3-custom-visualizations/exercise.tsx',
      solutionPath: './src/exercises/data-visualization/02-d3-custom-visualizations/solution.tsx',
      testsPath: './src/exercises/data-visualization/02-d3-custom-visualizations/test.ts',
      instructionsPath: './src/exercises/data-visualization/02-d3-custom-visualizations/instructions.md',
    },
    {
      id: '03-d3-performance-optimization',
      title: 'D3 Performance Optimization',
      description: 'Master advanced performance optimization for massive datasets using virtualization, canvas rendering, web workers, and streaming data with comprehensive monitoring',
      category: 'data-visualization',
      difficulty: 5,
      prerequisites: ['01-d3-react-integration', '02-d3-custom-visualizations'],
      learningObjectives: [
        'Master visualization virtualization for handling millions of data points efficiently',
        'Implement canvas rendering with GPU acceleration and optimized drawing operations',
        'Design web worker processing for non-blocking parallel data computation',
        'Create streaming visualization systems with real-time updates and backpressure handling',
        'Build performance monitoring with bottleneck identification and optimization recommendations',
        'Develop memory management strategies with object pooling and efficient resource utilization'
      ],
      hints: [
        'Use spatial indexing to efficiently cull elements outside the viewport',
        'Implement canvas rendering for maximum performance with large datasets',
        'Leverage web workers for heavy data processing without blocking the UI',
        'Use requestAnimationFrame for smooth animation and rendering coordination',
        'Monitor performance metrics to identify and resolve bottlenecks proactively'
      ],
      estimatedTime: 90,
      filePath: './exercise-files/data-visualization/03-d3-performance-optimization/exercise.tsx',
      solutionPath: './src/exercises/data-visualization/03-d3-performance-optimization/solution.tsx',
      testsPath: './src/exercises/data-visualization/03-d3-performance-optimization/test.ts',
      instructionsPath: './src/exercises/data-visualization/03-d3-performance-optimization/instructions.md',
    },
    {
      id: '04-chartjs-react-patterns',
      title: 'Chart.js React Patterns',
      description: 'Master Chart.js integration with React best practices, responsive design, interactive features, multi-chart coordination, and custom plugin development',
      category: 'data-visualization',
      difficulty: 4,
      prerequisites: ['01-d3-react-integration'],
      learningObjectives: [
        'Master Chart.js integration with React lifecycle management and state synchronization',
        'Implement responsive design with container observation and dynamic sizing',
        'Design interactive features with custom tooltips, hover effects, and click handling',
        'Create multi-chart systems with coordinated layouts and synchronized interactions',
        'Build custom Chart.js plugins with React integration and performance optimization',
        'Handle data updates efficiently with smooth animations and state preservation'
      ],
      hints: [
        'Use useRef patterns to bridge Chart.js instances with React component lifecycle',
        'Implement ResizeObserver for responsive chart behavior without performance issues',
        'Leverage Chart.js plugin system for custom functionality and visual enhancements',
        'Create provider patterns for centralized chart configuration and theme management',
        'Use Chart.js animation callbacks to coordinate with React state updates'
      ],
      estimatedTime: 60,
      filePath: './exercise-files/data-visualization/04-chartjs-react-patterns/exercise.tsx',
      solutionPath: './src/exercises/data-visualization/04-chartjs-react-patterns/solution.tsx',
      testsPath: './src/exercises/data-visualization/04-chartjs-react-patterns/test.ts',
      instructionsPath: './src/exercises/data-visualization/04-chartjs-react-patterns/instructions.md',
    },
    {
      id: '05-apexcharts-advanced-features',
      title: 'ApexCharts Advanced Features',
      description: 'Build sophisticated ApexCharts integrations with drilldown navigation, real-time streaming, synchronized multi-chart systems, and dense sparkline grids',
      category: 'data-visualization',
      difficulty: 4,
      prerequisites: ['01-d3-react-integration', '04-chartjs-react-patterns'],
      learningObjectives: [
        'Master ApexCharts integration with React and advanced interactive patterns',
        'Implement drilldown navigation with hierarchical data and breadcrumb tracking',
        'Design real-time data streaming with WebSocket integration and buffer management',
        'Create multi-chart coordination with synchronized interactions and shared state',
        'Build sparkline grids with dense data visualization and interactive features',
        'Handle advanced interactions with custom toolbars and annotation systems'
      ],
      hints: [
        'Use ApexCharts event system to create coordinated interactions across multiple charts',
        'Implement hierarchical data structures with efficient navigation and state management',
        'Leverage WebSocket simulation for real-time data streaming with performance monitoring',
        'Create provider patterns for chart synchronization and shared configuration',
        'Use sparkline optimization techniques for rendering large numbers of micro-charts'
      ],
      estimatedTime: 75,
      filePath: './exercise-files/data-visualization/05-apexcharts-advanced-features/exercise.tsx',
      solutionPath: './src/exercises/data-visualization/05-apexcharts-advanced-features/solution.tsx',
      testsPath: './src/exercises/data-visualization/05-apexcharts-advanced-features/test.ts',
      instructionsPath: './src/exercises/data-visualization/05-apexcharts-advanced-features/instructions.md',
    },
    {
      id: '06-highcharts-enterprise-patterns',
      title: 'Highcharts Enterprise Patterns',
      description: 'Build enterprise-grade visualizations with Highcharts Stock, Gantt charts, export systems, coordinated dashboards, and advanced enterprise features',
      category: 'data-visualization',
      difficulty: 5,
      prerequisites: ['01-d3-react-integration', '04-chartjs-react-patterns', '05-apexcharts-advanced-features'],
      learningObjectives: [
        'Master Highcharts Stock for financial time-series with technical indicators and analysis',
        'Implement Gantt charts for project management with task dependencies and resource allocation',
        'Create enterprise export systems with custom branding, batch processing, and format flexibility',
        'Design coordinated dashboards with synchronized interactions and real-time updates',
        'Build advanced theming with brand compliance and accessibility support',
        'Handle enterprise integration with security, performance, and scalability features'
      ],
      hints: [
        'Use Highcharts Stock modules for advanced financial charting with OHLC data and indicators',
        'Leverage Highcharts Gantt for project visualization with dependency management',
        'Implement export customization with branding templates and high-quality output',
        'Create chart synchronization patterns for coordinated dashboard interactions',
        'Use Highcharts accessibility modules for enterprise compliance requirements'
      ],
      estimatedTime: 75,
      filePath: './exercise-files/data-visualization/06-highcharts-enterprise-patterns/exercise.tsx',
      solutionPath: './src/exercises/data-visualization/06-highcharts-enterprise-patterns/solution.tsx',
      testsPath: './src/exercises/data-visualization/06-highcharts-enterprise-patterns/test.ts',
      instructionsPath: './src/exercises/data-visualization/06-highcharts-enterprise-patterns/instructions.md',
    },
    {
      id: '07-responsive-chart-systems',
      title: 'Responsive Chart Systems',
      description: 'Build sophisticated responsive visualization systems with device-adaptive layouts, touch interactions, breakpoint management, and accessibility patterns',
      category: 'data-visualization',
      difficulty: 4,
      prerequisites: ['01-d3-react-integration', '04-chartjs-react-patterns'],
      learningObjectives: [
        'Master responsive design patterns with CSS Grid, ResizeObserver, and media query integration',
        'Implement device detection with capability assessment and adaptive UI optimization',
        'Design touch interaction systems with gesture recognition and multi-touch support',
        'Create breakpoint management with intelligent layout adaptation and component orchestration',
        'Build orientation handling with automatic layout adjustment and state preservation',
        'Handle accessibility integration with keyboard navigation and screen reader compatibility'
      ],
      hints: [
        'Use ResizeObserver for efficient responsive behavior without performance penalties',
        'Implement touch gesture recognition for pan, pinch, tap, and swipe interactions',
        'Create breakpoint systems that adapt component behavior, not just styling',
        'Use CSS Grid and Container Queries for advanced responsive layout patterns',
        'Implement proper ARIA attributes and keyboard navigation for accessibility'
      ],
      estimatedTime: 75,
      filePath: './exercise-files/data-visualization/07-responsive-chart-systems/exercise.tsx',
      solutionPath: './src/exercises/data-visualization/07-responsive-chart-systems/solution.tsx',
      testsPath: './src/exercises/data-visualization/07-responsive-chart-systems/test.ts',
      instructionsPath: './src/exercises/data-visualization/07-responsive-chart-systems/instructions.md',
    },
    {
      id: '08-real-time-data-visualization',
      title: 'Real-Time Data Visualization',
      description: 'Master sophisticated real-time data visualization systems with streaming data integration, buffer management, backpressure handling, and performance monitoring',
      category: 'data-visualization',
      difficulty: 5,
      prerequisites: ['01-d3-react-integration', '03-d3-performance-optimization', '07-responsive-chart-systems'],
      learningObjectives: [
        'Master real-time data streaming with WebSocket integration and efficient data flow management',
        'Implement advanced buffering strategies with circular buffers, compression, and memory optimization',
        'Design performance monitoring with comprehensive bottleneck detection and optimization recommendations',
        'Handle connection management with resilient connectivity, automatic recovery, and reconnection strategies',
        'Create backpressure systems with adaptive sampling, rate limiting, and intelligent queue management',
        'Build live chart updates with smooth rendering coordination and animation synchronization'
      ],
      hints: [
        'Use circular buffers for efficient memory management with streaming data',
        'Implement WebSocket reconnection logic with exponential backoff and fallback mechanisms',
        'Create adaptive sampling strategies to handle high-frequency data streams',
        'Use requestAnimationFrame for coordinated chart updates and smooth animations',
        'Monitor performance metrics to detect bottlenecks and optimize data flow automatically'
      ],
      estimatedTime: 90,
      filePath: './exercise-files/data-visualization/08-real-time-data-visualization/exercise.tsx',
      solutionPath: './src/exercises/data-visualization/08-real-time-data-visualization/solution.tsx',
      testsPath: './src/exercises/data-visualization/08-real-time-data-visualization/test.ts',
      instructionsPath: './src/exercises/data-visualization/08-real-time-data-visualization/instructions.md',
    },
    {
      id: '09-interactive-dashboard-architecture',
      title: 'Interactive Dashboard Architecture',
      description: 'Build complex interactive dashboard systems with modular architecture, state orchestration, advanced filtering, and cross-chart coordination patterns',
      category: 'data-visualization',
      difficulty: 5,
      prerequisites: ['01-d3-react-integration', '07-responsive-chart-systems', '08-real-time-data-visualization'],
      learningObjectives: [
        'Master dashboard architecture with modular layout management and component orchestration',
        'Implement state orchestration with comprehensive cross-component synchronization and data flow coordination',
        'Design advanced filter management with cascading filters, temporal controls, and real-time updates',
        'Create chart registry systems with dynamic plugin architecture and runtime configuration',
        'Handle cross-chart interactions with brushing, selection, drill-down capabilities, and coordinated updates',
        'Build responsive dashboard layouts with drag-and-drop positioning, resizing, and persistence features'
      ],
      hints: [
        'Use React Context and useReducer for comprehensive dashboard state management',
        'Implement plugin architecture for dynamic chart registration and configuration',
        'Create filter systems with complex query building and cascading dependencies',
        'Use performance monitoring to track dashboard metrics and optimize rendering',
        'Implement drag-and-drop with collision detection and layout persistence'
      ],
      estimatedTime: 90,
      filePath: './exercise-files/data-visualization/09-interactive-dashboard-architecture/exercise.tsx',
      solutionPath: './src/exercises/data-visualization/09-interactive-dashboard-architecture/solution.tsx',
      testsPath: './src/exercises/data-visualization/09-interactive-dashboard-architecture/test.ts',
      instructionsPath: './src/exercises/data-visualization/09-interactive-dashboard-architecture/instructions.md',
    },
    {
      id: '10-chart-performance-optimization',
      title: 'Chart Performance Optimization',
      description: 'Master advanced performance optimization for data visualizations with comprehensive profiling, memory management, render optimization, and large dataset processing',
      category: 'data-visualization',
      difficulty: 5,
      prerequisites: ['01-d3-react-integration', '03-d3-performance-optimization', '08-real-time-data-visualization'],
      learningObjectives: [
        'Master comprehensive performance profiling with render timing analysis and bottleneck detection',
        'Implement advanced memory monitoring with garbage collection optimization and leak detection',
        'Design render optimization with frame scheduling, virtualization, and batch processing',
        'Create data processing engines with streaming, compression, and progressive loading capabilities',
        'Handle massive datasets efficiently with chunking, indexing, and memory-efficient algorithms',
        'Build animation optimization with performance-aware transitions and frame management'
      ],
      hints: [
        'Use performance.now() for high-resolution timing measurements and profiling',
        'Implement object pooling and memory management strategies for efficient resource utilization',
        'Create render scheduling with requestAnimationFrame and priority queues for smooth performance',
        'Use web workers for data processing to avoid blocking the main thread',
        'Monitor memory usage and implement automatic garbage collection optimization'
      ],
      estimatedTime: 90,
      filePath: './exercise-files/data-visualization/10-chart-performance-optimization/exercise.tsx',
      solutionPath: './src/exercises/data-visualization/10-chart-performance-optimization/solution.tsx',
      testsPath: './src/exercises/data-visualization/10-chart-performance-optimization/test.ts',
      instructionsPath: './src/exercises/data-visualization/10-chart-performance-optimization/instructions.md',
    },
    {
      id: '11-visualization-testing-strategies',
      title: 'Visualization Testing Strategies',
      description: 'Build comprehensive testing strategies for data visualizations with visual regression testing, interaction simulation, and accessibility validation',
      category: 'data-visualization',
      difficulty: 4,
      prerequisites: ['01-d3-react-integration', '07-responsive-chart-systems', '10-chart-performance-optimization'],
      learningObjectives: [
        'Master visual regression testing with screenshot comparison and baseline management',
        'Implement comprehensive interaction testing with event simulation and behavior validation',
        'Design data validation systems with accuracy testing and edge case handling',
        'Create accessibility testing with WCAG compliance and assistive technology simulation',
        'Build cross-browser testing with automated screenshot comparison and compatibility validation',
        'Handle performance testing with rendering benchmarks and optimization verification'
      ],
      hints: [
        'Use headless browsers like Playwright or Puppeteer for visual regression testing',
        'Implement event simulation for comprehensive user interaction testing',
        'Create custom Jest matchers for visualization-specific assertions and validations',
        'Use axe-core for automated accessibility testing and WCAG compliance validation',
        'Build test data generators for comprehensive edge case and boundary testing'
      ],
      estimatedTime: 75,
      filePath: './exercise-files/data-visualization/11-visualization-testing-strategies/exercise.tsx',
      solutionPath: './src/exercises/data-visualization/11-visualization-testing-strategies/solution.tsx',
      testsPath: './src/exercises/data-visualization/11-visualization-testing-strategies/test.ts',
      instructionsPath: './src/exercises/data-visualization/11-visualization-testing-strategies/instructions.md',
    },
    {
      id: '12-cross-platform-visualization',
      title: 'Cross-Platform Visualization',
      description: 'Build visualizations that work seamlessly across web browsers, mobile devices, server environments, and embedded contexts with universal compatibility',
      category: 'data-visualization',
      difficulty: 5,
      prerequisites: ['01-d3-react-integration', '07-responsive-chart-systems', '10-chart-performance-optimization', '11-visualization-testing-strategies'],
      learningObjectives: [
        'Master universal chart components that work consistently across all platforms and environments',
        'Implement platform-specific adapters for optimal performance on each target environment',
        'Design comprehensive export systems supporting multiple formats and deployment scenarios',
        'Create secure embed widgets with iframe integration and cross-domain communication',
        'Handle server-side rendering compatibility with Next.js and static site generation',
        'Build mobile optimization with touch interactions, responsive design, and platform-specific features'
      ],
      hints: [
        'Use feature detection to adapt chart behavior based on platform capabilities',
        'Implement platform-specific optimizations while maintaining consistent APIs',
        'Create export engines that work across server and client environments',
        'Use secure iframe patterns for embeddable widgets with proper sandboxing',
        'Build SSR-compatible components that hydrate properly on the client side'
      ],
      estimatedTime: 90,
      filePath: './exercise-files/data-visualization/12-cross-platform-visualization/exercise.tsx',
      solutionPath: './src/exercises/data-visualization/12-cross-platform-visualization/solution.tsx',
      testsPath: './src/exercises/data-visualization/12-cross-platform-visualization/test.ts',
      instructionsPath: './src/exercises/data-visualization/12-cross-platform-visualization/instructions.md',
    }
  ],
};