import type { ExerciseCategory } from '@/types';

export const componentArchitectureDesignPatternsCategory: ExerciseCategory = {
  id: 'component-architecture-design-patterns',
  name: 'Component Architecture & Design Patterns',
  description: 'Master advanced React component patterns and architecture for scalable, maintainable applications',
  icon: 'IconComponents',
  order: 7,
  exercises: [
    {
      id: '01-compound-components',
      title: 'Compound Components Pattern',
      description: 'Master compound component pattern with context sharing, flexible APIs, and TypeScript constraints',
      category: 'component-architecture-design-patterns',
      difficulty: 4,
      prerequisites: ['react-hooks/03-usecontext-data-sharing', 'react-hooks/04-custom-hooks'],
      learningObjectives: [
        'Understand compound components pattern and its benefits',
        'Master context sharing between compound components',
        'Build flexible, composable component APIs',
        'Implement React.Children utilities for component composition',
        'Apply TypeScript generic constraints for type safety',
        'Create reusable compound component patterns',
      ],
      hints: [
        'Compound components share state through React Context',
        'Use React.Children utilities to enhance and validate children',
        'Attach sub-components to main component for intuitive APIs',
        'Implement both controlled and uncontrolled patterns',
        'Validate context usage and provide helpful error messages',
        'Use TypeScript generics for flexible, type-safe components',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/component-architecture-design-patterns/01-compound-components/exercise.tsx',
      solutionPath: './src/exercises/component-architecture-design-patterns/01-compound-components/solution.tsx',
      testsPath: './src/exercises/component-architecture-design-patterns/01-compound-components/test.ts',
      instructionsPath: './src/exercises/component-architecture-design-patterns/01-compound-components/instructions.md',
    },
    {
      id: '02-render-props-to-hooks',
      title: 'Render Props to Hooks Migration',
      description: 'Convert render props patterns to modern hooks with performance comparisons and migration strategies',
      category: 'component-architecture-design-patterns',
      difficulty: 4,
      prerequisites: ['react-hooks/04-custom-hooks', 'react-hooks/02-useeffect-lifecycle'],
      learningObjectives: [
        'Understand render props pattern benefits and limitations',
        'Master converting render prop components to hooks',
        'Implement performance tracking and comparison utilities',
        'Build backward compatibility wrappers for gradual migration',
        'Learn testing strategies for both patterns',
        'Apply migration best practices in real-world scenarios',
      ],
      hints: [
        'Extract logic from render prop components to create equivalent hooks',
        'Use useCallback and useMemo for performance optimization',
        'Implement cleanup logic with useEffect return functions',
        'Create withRenderProps wrapper for backward compatibility',
        'Track render performance with useRef and performance.now()',
        'Test hooks with react-hooks-testing-library for better isolation',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/component-architecture-design-patterns/02-render-props-to-hooks/exercise.tsx',
      solutionPath: './src/exercises/component-architecture-design-patterns/02-render-props-to-hooks/solution.tsx',
      testsPath: './src/exercises/component-architecture-design-patterns/02-render-props-to-hooks/test.ts',
      instructionsPath: './src/exercises/component-architecture-design-patterns/02-render-props-to-hooks/instructions.md',
    },
    {
      id: '03-polymorphic-components',
      title: 'Polymorphic Components with TypeScript',
      description: 'Master polymorphic component design with advanced TypeScript constraints, design system integration, and enterprise patterns',
      category: 'component-architecture-design-patterns',
      difficulty: 5,
      prerequisites: ['react-hooks/04-custom-hooks', 'advanced-typescript-patterns/03-dependent-types-value-level-types'],
      learningObjectives: [
        'Master polymorphic component design patterns for maximum flexibility',
        'Implement advanced TypeScript generic constraints and prop inference',
        'Build design system foundations with consistent styling APIs',
        'Handle component prop inheritance and type safety across element types',
        'Implement forward ref patterns with polymorphic components',
        'Apply enterprise-level patterns used in production design systems',
      ],
      hints: [
        'Use ElementType generic constraint to allow any valid React element',
        'Implement PolymorphicComponentProp for proper prop type inference',
        'Forward refs correctly with generic type casting for polymorphic usage',
        'Create design system tokens and class generation utilities',
        'Build validation utilities for development-time error checking',
        'Implement testing utilities specifically for polymorphic components',
      ],
      estimatedTime: 90,
      filePath: './exercise-files/component-architecture-design-patterns/03-polymorphic-components/exercise.tsx',
      solutionPath: './src/exercises/component-architecture-design-patterns/03-polymorphic-components/solution.tsx',
      testsPath: './src/exercises/component-architecture-design-patterns/03-polymorphic-components/test.ts',
      instructionsPath: './src/exercises/component-architecture-design-patterns/03-polymorphic-components/instructions.md',
    },
    {
      id: '04-controlled-uncontrolled-patterns',
      title: 'Controlled vs Uncontrolled Component Patterns',
      description: 'Master controlled and uncontrolled patterns, build flexible hybrid components, and learn architectural decision-making',
      category: 'component-architecture-design-patterns',
      difficulty: 4,
      prerequisites: ['react-hooks/01-usestate-fundamentals', 'react-hooks/04-custom-hooks'],
      learningObjectives: [
        'Understand controlled vs uncontrolled component patterns and trade-offs',
        'Build flexible components that support both controlled and uncontrolled modes',
        'Master decision-making for choosing appropriate state management patterns',
        'Implement hybrid solutions with optional external control',
        'Handle state validation across different component control patterns',
        'Design imperative APIs with forward ref patterns',
      ],
      hints: [
        'Detect controlled mode by checking if value prop is provided',
        'Maintain internal state for uncontrolled mode while respecting external control',
        'Use useImperativeHandle to provide imperative APIs through refs',
        'Implement validation with configurable timing (onChange vs onBlur)',
        'Create smart forms that adapt their behavior based on requirements',
        'Build state management utilities for complex hybrid scenarios',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/component-architecture-design-patterns/04-controlled-uncontrolled-patterns/exercise.tsx',
      solutionPath: './src/exercises/component-architecture-design-patterns/04-controlled-uncontrolled-patterns/solution.tsx',
      testsPath: './src/exercises/component-architecture-design-patterns/04-controlled-uncontrolled-patterns/test.ts',
      instructionsPath: './src/exercises/component-architecture-design-patterns/04-controlled-uncontrolled-patterns/instructions.md',
    },
    {
      id: '05-component-composition',
      title: 'Advanced Component Composition Strategies',
      description: 'Master enterprise-level composition patterns: layout systems, provider composition, HOC composition, and slot-based architecture',
      category: 'component-architecture-design-patterns',
      difficulty: 5,
      prerequisites: ['react-hooks/03-usecontext-data-sharing', 'component-architecture-design-patterns/01-compound-components'],
      learningObjectives: [
        'Master composition over inheritance principles for scalable architecture',
        'Build flexible layout systems with intelligent spacing and alignment',
        'Implement provider composition utilities to reduce context nesting',
        'Create HOC composition chains with performance optimization',
        'Design slot-based composition systems for flexible content placement',
        'Apply render optimization techniques for complex composed components',
      ],
      hints: [
        'Use provider composition to flatten nested provider hierarchies',
        'Implement layout context for intelligent child component spacing',
        'Create HOC composition utilities with proper displayName handling',
        'Design slot systems with named content areas and fallback support',
        'Use render tracking for performance monitoring in development',
        'Apply conditional rendering with animation support for better UX',
      ],
      estimatedTime: 90,
      filePath: './exercise-files/component-architecture-design-patterns/05-component-composition/exercise.tsx',
      solutionPath: './src/exercises/component-architecture-design-patterns/05-component-composition/solution.tsx',
      testsPath: './src/exercises/component-architecture-design-patterns/05-component-composition/test.ts',
      instructionsPath: './src/exercises/component-architecture-design-patterns/05-component-composition/instructions.md',
    },
    {
      id: '06-design-system-patterns',
      title: 'Design System Architecture & Component Libraries',
      description: 'Build production-ready design systems with tokens, variants, extensible components, and team scalability patterns',
      category: 'component-architecture-design-patterns',
      difficulty: 5,
      prerequisites: ['component-architecture-design-patterns/03-polymorphic-components', 'advanced-typescript-patterns/02-utility-types-conditional-types'],
      learningObjectives: [
        'Design scalable design token systems with theme support and customization',
        'Implement sophisticated variant systems with compound and responsive variants',
        'Build extensible component architectures for large team collaboration',
        'Master theme context and CSS-in-JS integration patterns',
        'Create component documentation and development tooling systems',
        'Apply enterprise patterns for design system governance and evolution',
      ],
      hints: [
        'Use design tokens as the foundation for all visual decisions',
        'Implement variant resolvers with intelligent CSS class generation',
        'Create extensible component factories with polymorphic support',
        'Build theme providers with dark mode and customization support',
        'Design component documentation systems with live examples',
        'Apply CSS custom properties for runtime theme switching',
      ],
      estimatedTime: 90,
      filePath: './exercise-files/component-architecture-design-patterns/06-design-system-patterns/exercise.tsx',
      solutionPath: './src/exercises/component-architecture-design-patterns/06-design-system-patterns/solution.tsx',
      testsPath: './src/exercises/component-architecture-design-patterns/06-design-system-patterns/test.ts',
      instructionsPath: './src/exercises/component-architecture-design-patterns/06-design-system-patterns/instructions.md',
    },
  ],
};