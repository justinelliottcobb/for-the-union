import type { ExerciseCategory } from '@/types';

export const componentArchitectureDesignPatternsCategory: ExerciseCategory = {
  id: 'component-architecture-design-patterns',
  name: 'Component Architecture & Design Patterns',
  description: 'Master advanced React component patterns and architecture for scalable, maintainable applications',
  icon: 'IconComponents',
  order: 7,
  exercises: [
    {
      id: '01-compound-components',
      title: 'Compound Components Pattern',
      description: 'Master compound component pattern with context sharing, flexible APIs, and TypeScript constraints',
      category: 'component-architecture-design-patterns',
      difficulty: 4,
      prerequisites: ['react-hooks/03-usecontext-data-sharing', 'react-hooks/04-custom-hooks'],
      learningObjectives: [
        'Understand compound components pattern and its benefits',
        'Master context sharing between compound components',
        'Build flexible, composable component APIs',
        'Implement React.Children utilities for component composition',
        'Apply TypeScript generic constraints for type safety',
        'Create reusable compound component patterns',
      ],
      hints: [
        'Compound components share state through React Context',
        'Use React.Children utilities to enhance and validate children',
        'Attach sub-components to main component for intuitive APIs',
        'Implement both controlled and uncontrolled patterns',
        'Validate context usage and provide helpful error messages',
        'Use TypeScript generics for flexible, type-safe components',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/component-architecture-design-patterns/01-compound-components/exercise.tsx',
      solutionPath: './src/exercises/component-architecture-design-patterns/01-compound-components/solution.tsx',
      testsPath: './src/exercises/component-architecture-design-patterns/01-compound-components/test.ts',
      instructionsPath: './src/exercises/component-architecture-design-patterns/01-compound-components/instructions.md',
    },
    {
      id: '02-render-props-to-hooks',
      title: 'Render Props to Hooks Migration',
      description: 'Convert render props patterns to modern hooks with performance comparisons and migration strategies',
      category: 'component-architecture-design-patterns',
      difficulty: 4,
      prerequisites: ['react-hooks/04-custom-hooks', 'react-hooks/02-useeffect-lifecycle'],
      learningObjectives: [
        'Understand render props pattern benefits and limitations',
        'Master converting render prop components to hooks',
        'Implement performance tracking and comparison utilities',
        'Build backward compatibility wrappers for gradual migration',
        'Learn testing strategies for both patterns',
        'Apply migration best practices in real-world scenarios',
      ],
      hints: [
        'Extract logic from render prop components to create equivalent hooks',
        'Use useCallback and useMemo for performance optimization',
        'Implement cleanup logic with useEffect return functions',
        'Create withRenderProps wrapper for backward compatibility',
        'Track render performance with useRef and performance.now()',
        'Test hooks with react-hooks-testing-library for better isolation',
      ],
      estimatedTime: 75,
      filePath: './exercise-files/component-architecture-design-patterns/02-render-props-to-hooks/exercise.tsx',
      solutionPath: './src/exercises/component-architecture-design-patterns/02-render-props-to-hooks/solution.tsx',
      testsPath: './src/exercises/component-architecture-design-patterns/02-render-props-to-hooks/test.ts',
      instructionsPath: './src/exercises/component-architecture-design-patterns/02-render-props-to-hooks/instructions.md',
    },
  ],
};