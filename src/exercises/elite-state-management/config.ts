import type { ExerciseCategory } from '@/types';

export const eliteStateManagementCategory: ExerciseCategory = {
  id: 'elite-state-management',
  name: 'Elite State Management',
  description: 'Master advanced state patterns combining discriminated unions with useReducer and Redux architecture',
  icon: 'IconBrain',
  order: 3,
  exercises: [
    {
      id: '01-usereducer-patterns',
      title: 'useReducer with Discriminated Union Patterns',
      description: 'Master advanced state management by combining useReducer with discriminated unions for type-safe, scalable, and predictable state transitions',
      category: 'elite-state-management',
      difficulty: 5,
      prerequisites: ['discriminated-unions', 'react-hooks'],
      learningObjectives: [
        'Combine discriminated unions with useReducer for type-safe actions',
        'Design complex state machines with predictable transitions',
        'Implement async operations with discriminated union states',
        'Create reusable reducer patterns for different domains',
        'Handle error states and loading patterns elegantly',
        'Build undo/redo functionality with discriminated unions',
      ],
      hints: [
        'Always define discriminated unions for both state and actions',
        'Use exhaustive checking with `never` type for complete coverage',
        'Keep reducers pure - no side effects or mutations',
        'Use immer for complex state updates if needed',
        'Implement state machine guards for valid transitions',
        'Create action creators for better ergonomics',
      ],
      estimatedTime: 45,
      filePath: './exercise-files/elite-state-management/01-usereducer-patterns/exercise.tsx',
      solutionPath: './src/exercises/elite-state-management/01-usereducer-patterns/solution.tsx',
      testsPath: './src/exercises/elite-state-management/01-usereducer-patterns/test.ts',
      instructionsPath: './src/exercises/elite-state-management/01-usereducer-patterns/instructions.md',
    },
    {
      id: '02-redux-discriminated-patterns',
      title: 'Redux with Discriminated Union Actions',
      description: 'Build scalable Redux applications using discriminated unions for actions and state management',
      category: 'elite-state-management',
      difficulty: 5,
      prerequisites: ['01-usereducer-patterns'],
      learningObjectives: [
        'Implement Redux with discriminated union action types',
        'Design normalized state with discriminated unions',
        'Create type-safe action creators and selectors',
        'Handle complex async flows with Redux Toolkit',
        'Implement optimistic updates with rollback patterns',
        'Build real-time synchronization with state machines',
      ],
      hints: [
        'Use Redux Toolkit for better developer experience',
        'Normalize your state shape for better performance',
        'Create typed hooks for dispatching and selecting',
        'Use discriminated unions for different entity states',
        'Implement middleware for complex async patterns',
        'Consider using RTK Query for data fetching',
      ],
      estimatedTime: 50,
      filePath: './exercise-files/elite-state-management/02-redux-discriminated-patterns/exercise.tsx',
      solutionPath: './src/exercises/elite-state-management/02-redux-discriminated-patterns/solution.tsx',
      testsPath: './src/exercises/elite-state-management/02-redux-discriminated-patterns/test.ts',
      instructionsPath: './src/exercises/elite-state-management/02-redux-discriminated-patterns/instructions.md',
    },
    {
      id: '03-advanced-state-machines',
      title: 'Advanced State Machines with XState',
      description: 'Build complex state machines using XState with discriminated unions for bulletproof state management',
      category: 'elite-state-management',
      difficulty: 5,
      prerequisites: ['01-usereducer-patterns', '02-redux-discriminated-patterns'],
      learningObjectives: [
        'Model complex business logic as state machines',
        'Integrate XState with React and TypeScript',
        'Design hierarchical and parallel state machines',
        'Implement guards, actions, and activities',
        'Handle machine-to-machine communication',
        'Test state machines comprehensively',
      ],
      hints: [
        'Start with simple machines and build complexity gradually',
        'Use the XState visualizer to understand machine behavior',
        'Leverage TypeScript for better machine typing',
        'Consider using services for async operations',
        'Use hierarchical states for complex UI flows',
        'Test all possible state transitions thoroughly',
      ],
      estimatedTime: 55,
      filePath: './exercise-files/elite-state-management/03-advanced-state-machines/exercise.tsx',
      solutionPath: './src/exercises/elite-state-management/03-advanced-state-machines/solution.tsx',
      testsPath: './src/exercises/elite-state-management/03-advanced-state-machines/test.ts',
      instructionsPath: './src/exercises/elite-state-management/03-advanced-state-machines/instructions.md',
    },
    {
      id: '04-discriminated-union-state-patterns',
      title: 'Discriminated Union State Patterns',
      description: 'Master advanced patterns for modeling complex domain state with discriminated unions',
      category: 'elite-state-management',
      difficulty: 4,
      prerequisites: ['01-usereducer-patterns'],
      learningObjectives: [
        'Model complex business domains with discriminated unions',
        'Implement entity lifecycle states with type safety',
        'Design validation and error handling patterns',
        'Create nested and hierarchical state structures',
        'Handle state normalization and denormalization',
        'Build reactive state update patterns',
      ],
      hints: [
        'Use discriminated unions to model entity lifecycles',
        'Consider state normalization for complex relationships',
        'Implement validation as discriminated union results',
        'Use tagged unions for different operation types',
        'Consider using optics for deep state updates',
        'Design state machines for business processes',
      ],
      estimatedTime: 40,
      filePath: './exercise-files/elite-state-management/04-discriminated-union-state-patterns/exercise.tsx',
      solutionPath: './src/exercises/elite-state-management/04-discriminated-union-state-patterns/solution.tsx',
      testsPath: './src/exercises/elite-state-management/04-discriminated-union-state-patterns/test.ts',
      instructionsPath: './src/exercises/elite-state-management/04-discriminated-union-state-patterns/instructions.md',
    },
    {
      id: '05-higher-kinded-types-state',
      title: 'Higher-Kinded Types for State Management',
      description: 'Apply higher-kinded types and functional programming patterns to state management',
      category: 'elite-state-management',
      difficulty: 5,
      prerequisites: ['01-usereducer-patterns', '04-discriminated-union-state-patterns'],
      learningObjectives: [
        'Apply higher-kinded types to state management patterns',
        'Implement Effect and IO monads for state operations',
        'Create composable state transformations',
        'Build type-safe state machines with HKTs',
        'Design algebraic effect systems',
        'Implement lenses and optics for state updates',
      ],
      hints: [
        'Start with simple Effect monads for async operations',
        'Use HKTs to abstract over different state containers',
        'Implement lenses for focused state updates',
        'Consider using free monads for complex operations',
        'Build composable validation with applicative functors',
        'Use phantom types for state machine type safety',
      ],
      estimatedTime: 60,
      filePath: './exercise-files/elite-state-management/05-higher-kinded-types-state/exercise.tsx',
      solutionPath: './src/exercises/elite-state-management/05-higher-kinded-types-state/solution.tsx',
      testsPath: './src/exercises/elite-state-management/05-higher-kinded-types-state/test.ts',
      instructionsPath: './src/exercises/elite-state-management/05-higher-kinded-types-state/instructions.md',
    },
  ],
};